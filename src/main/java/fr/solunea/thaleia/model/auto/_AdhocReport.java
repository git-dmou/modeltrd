package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _AdhocReport was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AdhocReport extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ADD_DETAILS = Property.create("addDetails", Boolean.class);
    public static final Property<String> CONTENT = Property.create("content", String.class);
    public static final Property<String> CSV_DELIMITER = Property.create("csvDelimiter", String.class);
    public static final Property<String> DELIVERY_FORMAT = Property.create("deliveryFormat", String.class);
    public static final Property<String> DELIVERY_MODE = Property.create("deliveryMode", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> ERROR_RECIPIENTS = Property.create("errorRecipients", String.class);
    public static final Property<String> MAIL_BODY = Property.create("mailBody", String.class);
    public static final Property<String> MAIL_OBJECT = Property.create("mailObject", String.class);
    public static final Property<String> MAIL_RECIPIENTS = Property.create("mailRecipients", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> SCHEDULE = Property.create("schedule", String.class);
    public static final Property<String> SFTP_HOST = Property.create("sftpHost", String.class);
    public static final Property<String> SFTP_LOGIN = Property.create("sftpLogin", String.class);
    public static final Property<String> SFTP_PASSWORD = Property.create("sftpPassword", String.class);
    public static final Property<String> SFTP_PATH = Property.create("sftpPath", String.class);
    public static final Property<String> SFTP_PORT = Property.create("sftpPort", String.class);
    public static final Property<String> TYPE = Property.create("type", String.class);
    public static final Property<byte[]> XLS_TEMPLATE_BINARY = Property.create("xlsTemplateBinary", byte[].class);
    public static final Property<String> XLS_TEMPLATE_FILENAME = Property.create("xlsTemplateFilename", String.class);
    public static final Property<String> XLS_TEMPLATE_SHEET_NAME = Property.create("xlsTemplateSheetName", String.class);
    public static final Property<User> AUTHOR = Property.create("author", User.class);

    protected Boolean addDetails;
    protected String content;
    protected String csvDelimiter;
    protected String deliveryFormat;
    protected String deliveryMode;
    protected String description;
    protected String errorRecipients;
    protected String mailBody;
    protected String mailObject;
    protected String mailRecipients;
    protected String name;
    protected String schedule;
    protected String sftpHost;
    protected String sftpLogin;
    protected String sftpPassword;
    protected String sftpPath;
    protected String sftpPort;
    protected String type;
    protected byte[] xlsTemplateBinary;
    protected String xlsTemplateFilename;
    protected String xlsTemplateSheetName;

    protected Object author;

    public void setAddDetails(Boolean addDetails) {
        beforePropertyWrite("addDetails", this.addDetails, addDetails);
        this.addDetails = addDetails;
    }

    public Boolean getAddDetails() {
        beforePropertyRead("addDetails");
        return this.addDetails;
    }

    public void setContent(String content) {
        beforePropertyWrite("content", this.content, content);
        this.content = content;
    }

    public String getContent() {
        beforePropertyRead("content");
        return this.content;
    }

    public void setCsvDelimiter(String csvDelimiter) {
        beforePropertyWrite("csvDelimiter", this.csvDelimiter, csvDelimiter);
        this.csvDelimiter = csvDelimiter;
    }

    public String getCsvDelimiter() {
        beforePropertyRead("csvDelimiter");
        return this.csvDelimiter;
    }

    public void setDeliveryFormat(String deliveryFormat) {
        beforePropertyWrite("deliveryFormat", this.deliveryFormat, deliveryFormat);
        this.deliveryFormat = deliveryFormat;
    }

    public String getDeliveryFormat() {
        beforePropertyRead("deliveryFormat");
        return this.deliveryFormat;
    }

    public void setDeliveryMode(String deliveryMode) {
        beforePropertyWrite("deliveryMode", this.deliveryMode, deliveryMode);
        this.deliveryMode = deliveryMode;
    }

    public String getDeliveryMode() {
        beforePropertyRead("deliveryMode");
        return this.deliveryMode;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setErrorRecipients(String errorRecipients) {
        beforePropertyWrite("errorRecipients", this.errorRecipients, errorRecipients);
        this.errorRecipients = errorRecipients;
    }

    public String getErrorRecipients() {
        beforePropertyRead("errorRecipients");
        return this.errorRecipients;
    }

    public void setMailBody(String mailBody) {
        beforePropertyWrite("mailBody", this.mailBody, mailBody);
        this.mailBody = mailBody;
    }

    public String getMailBody() {
        beforePropertyRead("mailBody");
        return this.mailBody;
    }

    public void setMailObject(String mailObject) {
        beforePropertyWrite("mailObject", this.mailObject, mailObject);
        this.mailObject = mailObject;
    }

    public String getMailObject() {
        beforePropertyRead("mailObject");
        return this.mailObject;
    }

    public void setMailRecipients(String mailRecipients) {
        beforePropertyWrite("mailRecipients", this.mailRecipients, mailRecipients);
        this.mailRecipients = mailRecipients;
    }

    public String getMailRecipients() {
        beforePropertyRead("mailRecipients");
        return this.mailRecipients;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSchedule(String schedule) {
        beforePropertyWrite("schedule", this.schedule, schedule);
        this.schedule = schedule;
    }

    public String getSchedule() {
        beforePropertyRead("schedule");
        return this.schedule;
    }

    public void setSftpHost(String sftpHost) {
        beforePropertyWrite("sftpHost", this.sftpHost, sftpHost);
        this.sftpHost = sftpHost;
    }

    public String getSftpHost() {
        beforePropertyRead("sftpHost");
        return this.sftpHost;
    }

    public void setSftpLogin(String sftpLogin) {
        beforePropertyWrite("sftpLogin", this.sftpLogin, sftpLogin);
        this.sftpLogin = sftpLogin;
    }

    public String getSftpLogin() {
        beforePropertyRead("sftpLogin");
        return this.sftpLogin;
    }

    public void setSftpPassword(String sftpPassword) {
        beforePropertyWrite("sftpPassword", this.sftpPassword, sftpPassword);
        this.sftpPassword = sftpPassword;
    }

    public String getSftpPassword() {
        beforePropertyRead("sftpPassword");
        return this.sftpPassword;
    }

    public void setSftpPath(String sftpPath) {
        beforePropertyWrite("sftpPath", this.sftpPath, sftpPath);
        this.sftpPath = sftpPath;
    }

    public String getSftpPath() {
        beforePropertyRead("sftpPath");
        return this.sftpPath;
    }

    public void setSftpPort(String sftpPort) {
        beforePropertyWrite("sftpPort", this.sftpPort, sftpPort);
        this.sftpPort = sftpPort;
    }

    public String getSftpPort() {
        beforePropertyRead("sftpPort");
        return this.sftpPort;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setXlsTemplateBinary(byte[] xlsTemplateBinary) {
        beforePropertyWrite("xlsTemplateBinary", this.xlsTemplateBinary, xlsTemplateBinary);
        this.xlsTemplateBinary = xlsTemplateBinary;
    }

    public byte[] getXlsTemplateBinary() {
        beforePropertyRead("xlsTemplateBinary");
        return this.xlsTemplateBinary;
    }

    public void setXlsTemplateFilename(String xlsTemplateFilename) {
        beforePropertyWrite("xlsTemplateFilename", this.xlsTemplateFilename, xlsTemplateFilename);
        this.xlsTemplateFilename = xlsTemplateFilename;
    }

    public String getXlsTemplateFilename() {
        beforePropertyRead("xlsTemplateFilename");
        return this.xlsTemplateFilename;
    }

    public void setXlsTemplateSheetName(String xlsTemplateSheetName) {
        beforePropertyWrite("xlsTemplateSheetName", this.xlsTemplateSheetName, xlsTemplateSheetName);
        this.xlsTemplateSheetName = xlsTemplateSheetName;
    }

    public String getXlsTemplateSheetName() {
        beforePropertyRead("xlsTemplateSheetName");
        return this.xlsTemplateSheetName;
    }

    public void setAuthor(User author) {
        setToOneTarget("author", author, true);
    }

    public User getAuthor() {
        return (User)readProperty("author");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "addDetails":
                return this.addDetails;
            case "content":
                return this.content;
            case "csvDelimiter":
                return this.csvDelimiter;
            case "deliveryFormat":
                return this.deliveryFormat;
            case "deliveryMode":
                return this.deliveryMode;
            case "description":
                return this.description;
            case "errorRecipients":
                return this.errorRecipients;
            case "mailBody":
                return this.mailBody;
            case "mailObject":
                return this.mailObject;
            case "mailRecipients":
                return this.mailRecipients;
            case "name":
                return this.name;
            case "schedule":
                return this.schedule;
            case "sftpHost":
                return this.sftpHost;
            case "sftpLogin":
                return this.sftpLogin;
            case "sftpPassword":
                return this.sftpPassword;
            case "sftpPath":
                return this.sftpPath;
            case "sftpPort":
                return this.sftpPort;
            case "type":
                return this.type;
            case "xlsTemplateBinary":
                return this.xlsTemplateBinary;
            case "xlsTemplateFilename":
                return this.xlsTemplateFilename;
            case "xlsTemplateSheetName":
                return this.xlsTemplateSheetName;
            case "author":
                return this.author;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "addDetails":
                this.addDetails = (Boolean)val;
                break;
            case "content":
                this.content = (String)val;
                break;
            case "csvDelimiter":
                this.csvDelimiter = (String)val;
                break;
            case "deliveryFormat":
                this.deliveryFormat = (String)val;
                break;
            case "deliveryMode":
                this.deliveryMode = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "errorRecipients":
                this.errorRecipients = (String)val;
                break;
            case "mailBody":
                this.mailBody = (String)val;
                break;
            case "mailObject":
                this.mailObject = (String)val;
                break;
            case "mailRecipients":
                this.mailRecipients = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "schedule":
                this.schedule = (String)val;
                break;
            case "sftpHost":
                this.sftpHost = (String)val;
                break;
            case "sftpLogin":
                this.sftpLogin = (String)val;
                break;
            case "sftpPassword":
                this.sftpPassword = (String)val;
                break;
            case "sftpPath":
                this.sftpPath = (String)val;
                break;
            case "sftpPort":
                this.sftpPort = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "xlsTemplateBinary":
                this.xlsTemplateBinary = (byte[])val;
                break;
            case "xlsTemplateFilename":
                this.xlsTemplateFilename = (String)val;
                break;
            case "xlsTemplateSheetName":
                this.xlsTemplateSheetName = (String)val;
                break;
            case "author":
                this.author = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.addDetails);
        out.writeObject(this.content);
        out.writeObject(this.csvDelimiter);
        out.writeObject(this.deliveryFormat);
        out.writeObject(this.deliveryMode);
        out.writeObject(this.description);
        out.writeObject(this.errorRecipients);
        out.writeObject(this.mailBody);
        out.writeObject(this.mailObject);
        out.writeObject(this.mailRecipients);
        out.writeObject(this.name);
        out.writeObject(this.schedule);
        out.writeObject(this.sftpHost);
        out.writeObject(this.sftpLogin);
        out.writeObject(this.sftpPassword);
        out.writeObject(this.sftpPath);
        out.writeObject(this.sftpPort);
        out.writeObject(this.type);
        out.writeObject(this.xlsTemplateBinary);
        out.writeObject(this.xlsTemplateFilename);
        out.writeObject(this.xlsTemplateSheetName);
        out.writeObject(this.author);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.addDetails = (Boolean)in.readObject();
        this.content = (String)in.readObject();
        this.csvDelimiter = (String)in.readObject();
        this.deliveryFormat = (String)in.readObject();
        this.deliveryMode = (String)in.readObject();
        this.description = (String)in.readObject();
        this.errorRecipients = (String)in.readObject();
        this.mailBody = (String)in.readObject();
        this.mailObject = (String)in.readObject();
        this.mailRecipients = (String)in.readObject();
        this.name = (String)in.readObject();
        this.schedule = (String)in.readObject();
        this.sftpHost = (String)in.readObject();
        this.sftpLogin = (String)in.readObject();
        this.sftpPassword = (String)in.readObject();
        this.sftpPath = (String)in.readObject();
        this.sftpPort = (String)in.readObject();
        this.type = (String)in.readObject();
        this.xlsTemplateBinary = (byte[])in.readObject();
        this.xlsTemplateFilename = (String)in.readObject();
        this.xlsTemplateSheetName = (String)in.readObject();
        this.author = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.CmiData;
import fr.solunea.thaleia.model.ContentVersion;
import fr.solunea.thaleia.model.Locale;
import fr.solunea.thaleia.model.PublicationRecipient;
import fr.solunea.thaleia.model.PublicationSession;
import fr.solunea.thaleia.model.User;

/**
 * Class _Publication was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Publication extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<Date> DATE = Property.create("date", Date.class);
    public static final Property<Boolean> IS_ON_LMS = Property.create("isOnLms", Boolean.class);
    public static final Property<String> LAUNCHER = Property.create("launcher", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Boolean> PUBLIC_ACCESS = Property.create("publicAccess", Boolean.class);
    public static final Property<String> REFERENCE = Property.create("reference", String.class);
    public static final Property<List<CmiData>> CMI_DATAS = Property.create("cmiDatas", List.class);
    public static final Property<List<PublicationSession>> PUBLICATION_SESSIONS = Property.create("publicationSessions", List.class);
    public static final Property<List<PublicationRecipient>> RECIPIENTS = Property.create("recipients", List.class);
    public static final Property<Locale> SOURCE_LOCALE = Property.create("sourceLocale", Locale.class);
    public static final Property<ContentVersion> SOURCE_VERSION = Property.create("sourceVersion", ContentVersion.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected Boolean active;
    protected Date date;
    protected Boolean isOnLms;
    protected String launcher;
    protected String name;
    protected String password;
    protected Boolean publicAccess;
    protected String reference;

    protected Object cmiDatas;
    protected Object publicationSessions;
    protected Object recipients;
    protected Object sourceLocale;
    protected Object sourceVersion;
    protected Object user;

    public void setActive(Boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Boolean getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setDate(Date date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public Date getDate() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setIsOnLms(Boolean isOnLms) {
        beforePropertyWrite("isOnLms", this.isOnLms, isOnLms);
        this.isOnLms = isOnLms;
    }

    public Boolean getIsOnLms() {
        beforePropertyRead("isOnLms");
        return this.isOnLms;
    }

    public void setLauncher(String launcher) {
        beforePropertyWrite("launcher", this.launcher, launcher);
        this.launcher = launcher;
    }

    public String getLauncher() {
        beforePropertyRead("launcher");
        return this.launcher;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPublicAccess(Boolean publicAccess) {
        beforePropertyWrite("publicAccess", this.publicAccess, publicAccess);
        this.publicAccess = publicAccess;
    }

    public Boolean getPublicAccess() {
        beforePropertyRead("publicAccess");
        return this.publicAccess;
    }

    public void setReference(String reference) {
        beforePropertyWrite("reference", this.reference, reference);
        this.reference = reference;
    }

    public String getReference() {
        beforePropertyRead("reference");
        return this.reference;
    }

    public void addToCmiDatas(CmiData obj) {
        addToManyTarget("cmiDatas", obj, true);
    }

    public void removeFromCmiDatas(CmiData obj) {
        removeToManyTarget("cmiDatas", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CmiData> getCmiDatas() {
        return (List<CmiData>)readProperty("cmiDatas");
    }

    public void addToPublicationSessions(PublicationSession obj) {
        addToManyTarget("publicationSessions", obj, true);
    }

    public void removeFromPublicationSessions(PublicationSession obj) {
        removeToManyTarget("publicationSessions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PublicationSession> getPublicationSessions() {
        return (List<PublicationSession>)readProperty("publicationSessions");
    }

    public void addToRecipients(PublicationRecipient obj) {
        addToManyTarget("recipients", obj, true);
    }

    public void removeFromRecipients(PublicationRecipient obj) {
        removeToManyTarget("recipients", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PublicationRecipient> getRecipients() {
        return (List<PublicationRecipient>)readProperty("recipients");
    }

    public void setSourceLocale(Locale sourceLocale) {
        setToOneTarget("sourceLocale", sourceLocale, true);
    }

    public Locale getSourceLocale() {
        return (Locale)readProperty("sourceLocale");
    }

    public void setSourceVersion(ContentVersion sourceVersion) {
        setToOneTarget("sourceVersion", sourceVersion, true);
    }

    public ContentVersion getSourceVersion() {
        return (ContentVersion)readProperty("sourceVersion");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "date":
                return this.date;
            case "isOnLms":
                return this.isOnLms;
            case "launcher":
                return this.launcher;
            case "name":
                return this.name;
            case "password":
                return this.password;
            case "publicAccess":
                return this.publicAccess;
            case "reference":
                return this.reference;
            case "cmiDatas":
                return this.cmiDatas;
            case "publicationSessions":
                return this.publicationSessions;
            case "recipients":
                return this.recipients;
            case "sourceLocale":
                return this.sourceLocale;
            case "sourceVersion":
                return this.sourceVersion;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Boolean)val;
                break;
            case "date":
                this.date = (Date)val;
                break;
            case "isOnLms":
                this.isOnLms = (Boolean)val;
                break;
            case "launcher":
                this.launcher = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "publicAccess":
                this.publicAccess = (Boolean)val;
                break;
            case "reference":
                this.reference = (String)val;
                break;
            case "cmiDatas":
                this.cmiDatas = val;
                break;
            case "publicationSessions":
                this.publicationSessions = val;
                break;
            case "recipients":
                this.recipients = val;
                break;
            case "sourceLocale":
                this.sourceLocale = val;
                break;
            case "sourceVersion":
                this.sourceVersion = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.date);
        out.writeObject(this.isOnLms);
        out.writeObject(this.launcher);
        out.writeObject(this.name);
        out.writeObject(this.password);
        out.writeObject(this.publicAccess);
        out.writeObject(this.reference);
        out.writeObject(this.cmiDatas);
        out.writeObject(this.publicationSessions);
        out.writeObject(this.recipients);
        out.writeObject(this.sourceLocale);
        out.writeObject(this.sourceVersion);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Boolean)in.readObject();
        this.date = (Date)in.readObject();
        this.isOnLms = (Boolean)in.readObject();
        this.launcher = (String)in.readObject();
        this.name = (String)in.readObject();
        this.password = (String)in.readObject();
        this.publicAccess = (Boolean)in.readObject();
        this.reference = (String)in.readObject();
        this.cmiDatas = in.readObject();
        this.publicationSessions = in.readObject();
        this.recipients = in.readObject();
        this.sourceLocale = in.readObject();
        this.sourceVersion = in.readObject();
        this.user = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _LmsAccess was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LmsAccess extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> EXPIRATION_DATE = Property.create("expirationDate", Date.class);
    public static final Property<String> LMS_API_BASE_URL = Property.create("lmsApiBaseUrl", String.class);
    public static final Property<String> LMS_API_LOGIN = Property.create("lmsApiLogin", String.class);
    public static final Property<String> LMS_API_PASSWORD = Property.create("lmsApiPassword", String.class);
    public static final Property<String> LMS_CONTENT_AUTHOR_USER = Property.create("lmsContentAuthorUser", String.class);
    public static final Property<String> LMS_CONTENT_FOLDER = Property.create("lmsContentFolder", String.class);
    public static final Property<String> LMS_CONTENT_IMPORT_JOB = Property.create("lmsContentImportJob", String.class);
    public static final Property<String> LMS_DEEPLINK_CLASS_URL = Property.create("lmsDeeplinkClassUrl", String.class);
    public static final Property<String> LMS_DEEPLINK_REGISTRATION_URL = Property.create("lmsDeeplinkRegistrationUrl", String.class);
    public static final Property<String> LMS_PLAYER_TEMPLATE = Property.create("lmsPlayerTemplate", String.class);
    public static final Property<String> LMS_SECURITY_DOMAIN = Property.create("lmsSecurityDomain", String.class);
    public static final Property<String> LMS_SERVICE_IMPLEMENTATION = Property.create("lmsServiceImplementation", String.class);
    public static final Property<String> LMS_SFTP_FOLDER = Property.create("lmsSftpFolder", String.class);
    public static final Property<String> LMS_SFTP_LOGIN = Property.create("lmsSftpLogin", String.class);
    public static final Property<String> LMS_SFTP_PASSWORD = Property.create("lmsSftpPassword", String.class);
    public static final Property<String> LMS_SFTP_PORT = Property.create("lmsSftpPort", String.class);
    public static final Property<String> LMS_SFTP_URL = Property.create("lmsSftpUrl", String.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected Date expirationDate;
    protected String lmsApiBaseUrl;
    protected String lmsApiLogin;
    protected String lmsApiPassword;
    protected String lmsContentAuthorUser;
    protected String lmsContentFolder;
    protected String lmsContentImportJob;
    protected String lmsDeeplinkClassUrl;
    protected String lmsDeeplinkRegistrationUrl;
    protected String lmsPlayerTemplate;
    protected String lmsSecurityDomain;
    protected String lmsServiceImplementation;
    protected String lmsSftpFolder;
    protected String lmsSftpLogin;
    protected String lmsSftpPassword;
    protected String lmsSftpPort;
    protected String lmsSftpUrl;

    protected Object user;

    public void setExpirationDate(Date expirationDate) {
        beforePropertyWrite("expirationDate", this.expirationDate, expirationDate);
        this.expirationDate = expirationDate;
    }

    public Date getExpirationDate() {
        beforePropertyRead("expirationDate");
        return this.expirationDate;
    }

    public void setLmsApiBaseUrl(String lmsApiBaseUrl) {
        beforePropertyWrite("lmsApiBaseUrl", this.lmsApiBaseUrl, lmsApiBaseUrl);
        this.lmsApiBaseUrl = lmsApiBaseUrl;
    }

    public String getLmsApiBaseUrl() {
        beforePropertyRead("lmsApiBaseUrl");
        return this.lmsApiBaseUrl;
    }

    public void setLmsApiLogin(String lmsApiLogin) {
        beforePropertyWrite("lmsApiLogin", this.lmsApiLogin, lmsApiLogin);
        this.lmsApiLogin = lmsApiLogin;
    }

    public String getLmsApiLogin() {
        beforePropertyRead("lmsApiLogin");
        return this.lmsApiLogin;
    }

    public void setLmsApiPassword(String lmsApiPassword) {
        beforePropertyWrite("lmsApiPassword", this.lmsApiPassword, lmsApiPassword);
        this.lmsApiPassword = lmsApiPassword;
    }

    public String getLmsApiPassword() {
        beforePropertyRead("lmsApiPassword");
        return this.lmsApiPassword;
    }

    public void setLmsContentAuthorUser(String lmsContentAuthorUser) {
        beforePropertyWrite("lmsContentAuthorUser", this.lmsContentAuthorUser, lmsContentAuthorUser);
        this.lmsContentAuthorUser = lmsContentAuthorUser;
    }

    public String getLmsContentAuthorUser() {
        beforePropertyRead("lmsContentAuthorUser");
        return this.lmsContentAuthorUser;
    }

    public void setLmsContentFolder(String lmsContentFolder) {
        beforePropertyWrite("lmsContentFolder", this.lmsContentFolder, lmsContentFolder);
        this.lmsContentFolder = lmsContentFolder;
    }

    public String getLmsContentFolder() {
        beforePropertyRead("lmsContentFolder");
        return this.lmsContentFolder;
    }

    public void setLmsContentImportJob(String lmsContentImportJob) {
        beforePropertyWrite("lmsContentImportJob", this.lmsContentImportJob, lmsContentImportJob);
        this.lmsContentImportJob = lmsContentImportJob;
    }

    public String getLmsContentImportJob() {
        beforePropertyRead("lmsContentImportJob");
        return this.lmsContentImportJob;
    }

    public void setLmsDeeplinkClassUrl(String lmsDeeplinkClassUrl) {
        beforePropertyWrite("lmsDeeplinkClassUrl", this.lmsDeeplinkClassUrl, lmsDeeplinkClassUrl);
        this.lmsDeeplinkClassUrl = lmsDeeplinkClassUrl;
    }

    public String getLmsDeeplinkClassUrl() {
        beforePropertyRead("lmsDeeplinkClassUrl");
        return this.lmsDeeplinkClassUrl;
    }

    public void setLmsDeeplinkRegistrationUrl(String lmsDeeplinkRegistrationUrl) {
        beforePropertyWrite("lmsDeeplinkRegistrationUrl", this.lmsDeeplinkRegistrationUrl, lmsDeeplinkRegistrationUrl);
        this.lmsDeeplinkRegistrationUrl = lmsDeeplinkRegistrationUrl;
    }

    public String getLmsDeeplinkRegistrationUrl() {
        beforePropertyRead("lmsDeeplinkRegistrationUrl");
        return this.lmsDeeplinkRegistrationUrl;
    }

    public void setLmsPlayerTemplate(String lmsPlayerTemplate) {
        beforePropertyWrite("lmsPlayerTemplate", this.lmsPlayerTemplate, lmsPlayerTemplate);
        this.lmsPlayerTemplate = lmsPlayerTemplate;
    }

    public String getLmsPlayerTemplate() {
        beforePropertyRead("lmsPlayerTemplate");
        return this.lmsPlayerTemplate;
    }

    public void setLmsSecurityDomain(String lmsSecurityDomain) {
        beforePropertyWrite("lmsSecurityDomain", this.lmsSecurityDomain, lmsSecurityDomain);
        this.lmsSecurityDomain = lmsSecurityDomain;
    }

    public String getLmsSecurityDomain() {
        beforePropertyRead("lmsSecurityDomain");
        return this.lmsSecurityDomain;
    }

    public void setLmsServiceImplementation(String lmsServiceImplementation) {
        beforePropertyWrite("lmsServiceImplementation", this.lmsServiceImplementation, lmsServiceImplementation);
        this.lmsServiceImplementation = lmsServiceImplementation;
    }

    public String getLmsServiceImplementation() {
        beforePropertyRead("lmsServiceImplementation");
        return this.lmsServiceImplementation;
    }

    public void setLmsSftpFolder(String lmsSftpFolder) {
        beforePropertyWrite("lmsSftpFolder", this.lmsSftpFolder, lmsSftpFolder);
        this.lmsSftpFolder = lmsSftpFolder;
    }

    public String getLmsSftpFolder() {
        beforePropertyRead("lmsSftpFolder");
        return this.lmsSftpFolder;
    }

    public void setLmsSftpLogin(String lmsSftpLogin) {
        beforePropertyWrite("lmsSftpLogin", this.lmsSftpLogin, lmsSftpLogin);
        this.lmsSftpLogin = lmsSftpLogin;
    }

    public String getLmsSftpLogin() {
        beforePropertyRead("lmsSftpLogin");
        return this.lmsSftpLogin;
    }

    public void setLmsSftpPassword(String lmsSftpPassword) {
        beforePropertyWrite("lmsSftpPassword", this.lmsSftpPassword, lmsSftpPassword);
        this.lmsSftpPassword = lmsSftpPassword;
    }

    public String getLmsSftpPassword() {
        beforePropertyRead("lmsSftpPassword");
        return this.lmsSftpPassword;
    }

    public void setLmsSftpPort(String lmsSftpPort) {
        beforePropertyWrite("lmsSftpPort", this.lmsSftpPort, lmsSftpPort);
        this.lmsSftpPort = lmsSftpPort;
    }

    public String getLmsSftpPort() {
        beforePropertyRead("lmsSftpPort");
        return this.lmsSftpPort;
    }

    public void setLmsSftpUrl(String lmsSftpUrl) {
        beforePropertyWrite("lmsSftpUrl", this.lmsSftpUrl, lmsSftpUrl);
        this.lmsSftpUrl = lmsSftpUrl;
    }

    public String getLmsSftpUrl() {
        beforePropertyRead("lmsSftpUrl");
        return this.lmsSftpUrl;
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "expirationDate":
                return this.expirationDate;
            case "lmsApiBaseUrl":
                return this.lmsApiBaseUrl;
            case "lmsApiLogin":
                return this.lmsApiLogin;
            case "lmsApiPassword":
                return this.lmsApiPassword;
            case "lmsContentAuthorUser":
                return this.lmsContentAuthorUser;
            case "lmsContentFolder":
                return this.lmsContentFolder;
            case "lmsContentImportJob":
                return this.lmsContentImportJob;
            case "lmsDeeplinkClassUrl":
                return this.lmsDeeplinkClassUrl;
            case "lmsDeeplinkRegistrationUrl":
                return this.lmsDeeplinkRegistrationUrl;
            case "lmsPlayerTemplate":
                return this.lmsPlayerTemplate;
            case "lmsSecurityDomain":
                return this.lmsSecurityDomain;
            case "lmsServiceImplementation":
                return this.lmsServiceImplementation;
            case "lmsSftpFolder":
                return this.lmsSftpFolder;
            case "lmsSftpLogin":
                return this.lmsSftpLogin;
            case "lmsSftpPassword":
                return this.lmsSftpPassword;
            case "lmsSftpPort":
                return this.lmsSftpPort;
            case "lmsSftpUrl":
                return this.lmsSftpUrl;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "expirationDate":
                this.expirationDate = (Date)val;
                break;
            case "lmsApiBaseUrl":
                this.lmsApiBaseUrl = (String)val;
                break;
            case "lmsApiLogin":
                this.lmsApiLogin = (String)val;
                break;
            case "lmsApiPassword":
                this.lmsApiPassword = (String)val;
                break;
            case "lmsContentAuthorUser":
                this.lmsContentAuthorUser = (String)val;
                break;
            case "lmsContentFolder":
                this.lmsContentFolder = (String)val;
                break;
            case "lmsContentImportJob":
                this.lmsContentImportJob = (String)val;
                break;
            case "lmsDeeplinkClassUrl":
                this.lmsDeeplinkClassUrl = (String)val;
                break;
            case "lmsDeeplinkRegistrationUrl":
                this.lmsDeeplinkRegistrationUrl = (String)val;
                break;
            case "lmsPlayerTemplate":
                this.lmsPlayerTemplate = (String)val;
                break;
            case "lmsSecurityDomain":
                this.lmsSecurityDomain = (String)val;
                break;
            case "lmsServiceImplementation":
                this.lmsServiceImplementation = (String)val;
                break;
            case "lmsSftpFolder":
                this.lmsSftpFolder = (String)val;
                break;
            case "lmsSftpLogin":
                this.lmsSftpLogin = (String)val;
                break;
            case "lmsSftpPassword":
                this.lmsSftpPassword = (String)val;
                break;
            case "lmsSftpPort":
                this.lmsSftpPort = (String)val;
                break;
            case "lmsSftpUrl":
                this.lmsSftpUrl = (String)val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.expirationDate);
        out.writeObject(this.lmsApiBaseUrl);
        out.writeObject(this.lmsApiLogin);
        out.writeObject(this.lmsApiPassword);
        out.writeObject(this.lmsContentAuthorUser);
        out.writeObject(this.lmsContentFolder);
        out.writeObject(this.lmsContentImportJob);
        out.writeObject(this.lmsDeeplinkClassUrl);
        out.writeObject(this.lmsDeeplinkRegistrationUrl);
        out.writeObject(this.lmsPlayerTemplate);
        out.writeObject(this.lmsSecurityDomain);
        out.writeObject(this.lmsServiceImplementation);
        out.writeObject(this.lmsSftpFolder);
        out.writeObject(this.lmsSftpLogin);
        out.writeObject(this.lmsSftpPassword);
        out.writeObject(this.lmsSftpPort);
        out.writeObject(this.lmsSftpUrl);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.expirationDate = (Date)in.readObject();
        this.lmsApiBaseUrl = (String)in.readObject();
        this.lmsApiLogin = (String)in.readObject();
        this.lmsApiPassword = (String)in.readObject();
        this.lmsContentAuthorUser = (String)in.readObject();
        this.lmsContentFolder = (String)in.readObject();
        this.lmsContentImportJob = (String)in.readObject();
        this.lmsDeeplinkClassUrl = (String)in.readObject();
        this.lmsDeeplinkRegistrationUrl = (String)in.readObject();
        this.lmsPlayerTemplate = (String)in.readObject();
        this.lmsSecurityDomain = (String)in.readObject();
        this.lmsServiceImplementation = (String)in.readObject();
        this.lmsSftpFolder = (String)in.readObject();
        this.lmsSftpLogin = (String)in.readObject();
        this.lmsSftpPassword = (String)in.readObject();
        this.lmsSftpPort = (String)in.readObject();
        this.lmsSftpUrl = (String)in.readObject();
        this.user = in.readObject();
    }

}

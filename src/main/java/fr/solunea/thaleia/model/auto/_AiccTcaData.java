package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _AiccTcaData was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AiccTcaData extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String KEYDATA_PK_COLUMN = "keydata";

    public static final Property<String> ACTIVITY_ID = Property.create("activityId", String.class);
    public static final Property<String> ACTOR_MBOX = Property.create("actorMbox", String.class);
    public static final Property<String> AEROUSERID = Property.create("aerouserid", String.class);
    public static final Property<String> AEROUSERPWD = Property.create("aerouserpwd", String.class);
    public static final Property<String> DATA_TYPE = Property.create("dataType", String.class);
    public static final Property<Date> DATE_TRANSMISSION = Property.create("dateTransmission", Date.class);
    public static final Property<String> JSONOBJECT = Property.create("jsonobject", String.class);
    public static final Property<String> QUERYSTRING = Property.create("querystring", String.class);
    public static final Property<String> STATEMENT_REF = Property.create("statementRef", String.class);
    public static final Property<String> VERB_ID = Property.create("verbId", String.class);
    public static final Property<String> VISIBLE = Property.create("visible", String.class);

    protected String activityId;
    protected String actorMbox;
    protected String aerouserid;
    protected String aerouserpwd;
    protected String dataType;
    protected Date dateTransmission;
    protected String jsonobject;
    protected String querystring;
    protected String statementRef;
    protected String verbId;
    protected String visible;


    public void setActivityId(String activityId) {
        beforePropertyWrite("activityId", this.activityId, activityId);
        this.activityId = activityId;
    }

    public String getActivityId() {
        beforePropertyRead("activityId");
        return this.activityId;
    }

    public void setActorMbox(String actorMbox) {
        beforePropertyWrite("actorMbox", this.actorMbox, actorMbox);
        this.actorMbox = actorMbox;
    }

    public String getActorMbox() {
        beforePropertyRead("actorMbox");
        return this.actorMbox;
    }

    public void setAerouserid(String aerouserid) {
        beforePropertyWrite("aerouserid", this.aerouserid, aerouserid);
        this.aerouserid = aerouserid;
    }

    public String getAerouserid() {
        beforePropertyRead("aerouserid");
        return this.aerouserid;
    }

    public void setAerouserpwd(String aerouserpwd) {
        beforePropertyWrite("aerouserpwd", this.aerouserpwd, aerouserpwd);
        this.aerouserpwd = aerouserpwd;
    }

    public String getAerouserpwd() {
        beforePropertyRead("aerouserpwd");
        return this.aerouserpwd;
    }

    public void setDataType(String dataType) {
        beforePropertyWrite("dataType", this.dataType, dataType);
        this.dataType = dataType;
    }

    public String getDataType() {
        beforePropertyRead("dataType");
        return this.dataType;
    }

    public void setDateTransmission(Date dateTransmission) {
        beforePropertyWrite("dateTransmission", this.dateTransmission, dateTransmission);
        this.dateTransmission = dateTransmission;
    }

    public Date getDateTransmission() {
        beforePropertyRead("dateTransmission");
        return this.dateTransmission;
    }

    public void setJsonobject(String jsonobject) {
        beforePropertyWrite("jsonobject", this.jsonobject, jsonobject);
        this.jsonobject = jsonobject;
    }

    public String getJsonobject() {
        beforePropertyRead("jsonobject");
        return this.jsonobject;
    }

    public void setQuerystring(String querystring) {
        beforePropertyWrite("querystring", this.querystring, querystring);
        this.querystring = querystring;
    }

    public String getQuerystring() {
        beforePropertyRead("querystring");
        return this.querystring;
    }

    public void setStatementRef(String statementRef) {
        beforePropertyWrite("statementRef", this.statementRef, statementRef);
        this.statementRef = statementRef;
    }

    public String getStatementRef() {
        beforePropertyRead("statementRef");
        return this.statementRef;
    }

    public void setVerbId(String verbId) {
        beforePropertyWrite("verbId", this.verbId, verbId);
        this.verbId = verbId;
    }

    public String getVerbId() {
        beforePropertyRead("verbId");
        return this.verbId;
    }

    public void setVisible(String visible) {
        beforePropertyWrite("visible", this.visible, visible);
        this.visible = visible;
    }

    public String getVisible() {
        beforePropertyRead("visible");
        return this.visible;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "activityId":
                return this.activityId;
            case "actorMbox":
                return this.actorMbox;
            case "aerouserid":
                return this.aerouserid;
            case "aerouserpwd":
                return this.aerouserpwd;
            case "dataType":
                return this.dataType;
            case "dateTransmission":
                return this.dateTransmission;
            case "jsonobject":
                return this.jsonobject;
            case "querystring":
                return this.querystring;
            case "statementRef":
                return this.statementRef;
            case "verbId":
                return this.verbId;
            case "visible":
                return this.visible;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "activityId":
                this.activityId = (String)val;
                break;
            case "actorMbox":
                this.actorMbox = (String)val;
                break;
            case "aerouserid":
                this.aerouserid = (String)val;
                break;
            case "aerouserpwd":
                this.aerouserpwd = (String)val;
                break;
            case "dataType":
                this.dataType = (String)val;
                break;
            case "dateTransmission":
                this.dateTransmission = (Date)val;
                break;
            case "jsonobject":
                this.jsonobject = (String)val;
                break;
            case "querystring":
                this.querystring = (String)val;
                break;
            case "statementRef":
                this.statementRef = (String)val;
                break;
            case "verbId":
                this.verbId = (String)val;
                break;
            case "visible":
                this.visible = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.activityId);
        out.writeObject(this.actorMbox);
        out.writeObject(this.aerouserid);
        out.writeObject(this.aerouserpwd);
        out.writeObject(this.dataType);
        out.writeObject(this.dateTransmission);
        out.writeObject(this.jsonobject);
        out.writeObject(this.querystring);
        out.writeObject(this.statementRef);
        out.writeObject(this.verbId);
        out.writeObject(this.visible);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.activityId = (String)in.readObject();
        this.actorMbox = (String)in.readObject();
        this.aerouserid = (String)in.readObject();
        this.aerouserpwd = (String)in.readObject();
        this.dataType = (String)in.readObject();
        this.dateTransmission = (Date)in.readObject();
        this.jsonobject = (String)in.readObject();
        this.querystring = (String)in.readObject();
        this.statementRef = (String)in.readObject();
        this.verbId = (String)in.readObject();
        this.visible = (String)in.readObject();
    }

}

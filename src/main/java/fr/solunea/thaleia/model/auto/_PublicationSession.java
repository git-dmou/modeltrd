package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.Publication;

/**
 * Class _PublicationSession was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PublicationSession extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> TOKEN = Property.create("token", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<Date> VALID_UNTIL = Property.create("validUntil", Date.class);
    public static final Property<Publication> PUBLICATION = Property.create("publication", Publication.class);

    protected String token;
    protected String username;
    protected Date validUntil;

    protected Object publication;

    public void setToken(String token) {
        beforePropertyWrite("token", this.token, token);
        this.token = token;
    }

    public String getToken() {
        beforePropertyRead("token");
        return this.token;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void setValidUntil(Date validUntil) {
        beforePropertyWrite("validUntil", this.validUntil, validUntil);
        this.validUntil = validUntil;
    }

    public Date getValidUntil() {
        beforePropertyRead("validUntil");
        return this.validUntil;
    }

    public void setPublication(Publication publication) {
        setToOneTarget("publication", publication, true);
    }

    public Publication getPublication() {
        return (Publication)readProperty("publication");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "token":
                return this.token;
            case "username":
                return this.username;
            case "validUntil":
                return this.validUntil;
            case "publication":
                return this.publication;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "token":
                this.token = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "validUntil":
                this.validUntil = (Date)val;
                break;
            case "publication":
                this.publication = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.token);
        out.writeObject(this.username);
        out.writeObject(this.validUntil);
        out.writeObject(this.publication);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.token = (String)in.readObject();
        this.username = (String)in.readObject();
        this.validUntil = (Date)in.readObject();
        this.publication = in.readObject();
    }

}

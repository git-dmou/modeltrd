package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _MailTemplate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MailTemplate extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ATTACHMENT = Property.create("attachment", String.class);
    public static final Property<String> BCC = Property.create("bcc", String.class);
    public static final Property<String> BODY = Property.create("body", String.class);
    public static final Property<String> LOCALE = Property.create("locale", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> OBJECT = Property.create("object", String.class);
    public static final Property<String> SENDER = Property.create("sender", String.class);

    protected String attachment;
    protected String bcc;
    protected String body;
    protected String locale;
    protected String name;
    protected String object;
    protected String sender;


    public void setAttachment(String attachment) {
        beforePropertyWrite("attachment", this.attachment, attachment);
        this.attachment = attachment;
    }

    public String getAttachment() {
        beforePropertyRead("attachment");
        return this.attachment;
    }

    public void setBcc(String bcc) {
        beforePropertyWrite("bcc", this.bcc, bcc);
        this.bcc = bcc;
    }

    public String getBcc() {
        beforePropertyRead("bcc");
        return this.bcc;
    }

    public void setBody(String body) {
        beforePropertyWrite("body", this.body, body);
        this.body = body;
    }

    public String getBody() {
        beforePropertyRead("body");
        return this.body;
    }

    public void setLocale(String locale) {
        beforePropertyWrite("locale", this.locale, locale);
        this.locale = locale;
    }

    public String getLocale() {
        beforePropertyRead("locale");
        return this.locale;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setObject(String object) {
        beforePropertyWrite("object", this.object, object);
        this.object = object;
    }

    public String getObject() {
        beforePropertyRead("object");
        return this.object;
    }

    public void setSender(String sender) {
        beforePropertyWrite("sender", this.sender, sender);
        this.sender = sender;
    }

    public String getSender() {
        beforePropertyRead("sender");
        return this.sender;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "attachment":
                return this.attachment;
            case "bcc":
                return this.bcc;
            case "body":
                return this.body;
            case "locale":
                return this.locale;
            case "name":
                return this.name;
            case "object":
                return this.object;
            case "sender":
                return this.sender;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "attachment":
                this.attachment = (String)val;
                break;
            case "bcc":
                this.bcc = (String)val;
                break;
            case "body":
                this.body = (String)val;
                break;
            case "locale":
                this.locale = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "object":
                this.object = (String)val;
                break;
            case "sender":
                this.sender = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.attachment);
        out.writeObject(this.bcc);
        out.writeObject(this.body);
        out.writeObject(this.locale);
        out.writeObject(this.name);
        out.writeObject(this.object);
        out.writeObject(this.sender);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.attachment = (String)in.readObject();
        this.bcc = (String)in.readObject();
        this.body = (String)in.readObject();
        this.locale = (String)in.readObject();
        this.name = (String)in.readObject();
        this.object = (String)in.readObject();
        this.sender = (String)in.readObject();
    }

}

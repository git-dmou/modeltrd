package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.LrsEndpointActivity;

/**
 * Class _LrsEndpointActivityProfile was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LrsEndpointActivityProfile extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> JSON_OBJECT = Property.create("jsonObject", String.class);
    public static final Property<String> PROFILE_ID = Property.create("profileId", String.class);
    public static final Property<LrsEndpointActivity> ACTIVITY = Property.create("activity", LrsEndpointActivity.class);

    protected String jsonObject;
    protected String profileId;

    protected Object activity;

    public void setJsonObject(String jsonObject) {
        beforePropertyWrite("jsonObject", this.jsonObject, jsonObject);
        this.jsonObject = jsonObject;
    }

    public String getJsonObject() {
        beforePropertyRead("jsonObject");
        return this.jsonObject;
    }

    public void setProfileId(String profileId) {
        beforePropertyWrite("profileId", this.profileId, profileId);
        this.profileId = profileId;
    }

    public String getProfileId() {
        beforePropertyRead("profileId");
        return this.profileId;
    }

    public void setActivity(LrsEndpointActivity activity) {
        setToOneTarget("activity", activity, true);
    }

    public LrsEndpointActivity getActivity() {
        return (LrsEndpointActivity)readProperty("activity");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "jsonObject":
                return this.jsonObject;
            case "profileId":
                return this.profileId;
            case "activity":
                return this.activity;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "jsonObject":
                this.jsonObject = (String)val;
                break;
            case "profileId":
                this.profileId = (String)val;
                break;
            case "activity":
                this.activity = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.jsonObject);
        out.writeObject(this.profileId);
        out.writeObject(this.activity);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.jsonObject = (String)in.readObject();
        this.profileId = (String)in.readObject();
        this.activity = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.LicenceHolding;

/**
 * Class _Licence was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Licence extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> CATALOG_PRICE_EURO = Property.create("catalogPriceEuro", Integer.class);
    public static final Property<Integer> INCLUDED_PUBLICATION_CREDITS = Property.create("includedPublicationCredits", Integer.class);
    public static final Property<Boolean> IS_DEMO = Property.create("isDemo", Boolean.class);
    public static final Property<Integer> LICENCE_DURATION_DAYS = Property.create("licenceDurationDays", Integer.class);
    public static final Property<Integer> MAX_PUBLICATIONS = Property.create("maxPublications", Integer.class);
    public static final Property<Integer> MAX_SIZE_MO = Property.create("maxSizeMo", Integer.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> SKU = Property.create("sku", String.class);
    public static final Property<List<LicenceHolding>> HOLDINGS = Property.create("holdings", List.class);

    protected Integer catalogPriceEuro;
    protected Integer includedPublicationCredits;
    protected Boolean isDemo;
    protected Integer licenceDurationDays;
    protected Integer maxPublications;
    protected Integer maxSizeMo;
    protected String name;
    protected String sku;

    protected Object holdings;

    public void setCatalogPriceEuro(Integer catalogPriceEuro) {
        beforePropertyWrite("catalogPriceEuro", this.catalogPriceEuro, catalogPriceEuro);
        this.catalogPriceEuro = catalogPriceEuro;
    }

    public Integer getCatalogPriceEuro() {
        beforePropertyRead("catalogPriceEuro");
        return this.catalogPriceEuro;
    }

    public void setIncludedPublicationCredits(Integer includedPublicationCredits) {
        beforePropertyWrite("includedPublicationCredits", this.includedPublicationCredits, includedPublicationCredits);
        this.includedPublicationCredits = includedPublicationCredits;
    }

    public Integer getIncludedPublicationCredits() {
        beforePropertyRead("includedPublicationCredits");
        return this.includedPublicationCredits;
    }

    public void setIsDemo(Boolean isDemo) {
        beforePropertyWrite("isDemo", this.isDemo, isDemo);
        this.isDemo = isDemo;
    }

    public Boolean getIsDemo() {
        beforePropertyRead("isDemo");
        return this.isDemo;
    }

    public void setLicenceDurationDays(Integer licenceDurationDays) {
        beforePropertyWrite("licenceDurationDays", this.licenceDurationDays, licenceDurationDays);
        this.licenceDurationDays = licenceDurationDays;
    }

    public Integer getLicenceDurationDays() {
        beforePropertyRead("licenceDurationDays");
        return this.licenceDurationDays;
    }

    public void setMaxPublications(Integer maxPublications) {
        beforePropertyWrite("maxPublications", this.maxPublications, maxPublications);
        this.maxPublications = maxPublications;
    }

    public Integer getMaxPublications() {
        beforePropertyRead("maxPublications");
        return this.maxPublications;
    }

    public void setMaxSizeMo(Integer maxSizeMo) {
        beforePropertyWrite("maxSizeMo", this.maxSizeMo, maxSizeMo);
        this.maxSizeMo = maxSizeMo;
    }

    public Integer getMaxSizeMo() {
        beforePropertyRead("maxSizeMo");
        return this.maxSizeMo;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSku(String sku) {
        beforePropertyWrite("sku", this.sku, sku);
        this.sku = sku;
    }

    public String getSku() {
        beforePropertyRead("sku");
        return this.sku;
    }

    public void addToHoldings(LicenceHolding obj) {
        addToManyTarget("holdings", obj, true);
    }

    public void removeFromHoldings(LicenceHolding obj) {
        removeToManyTarget("holdings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LicenceHolding> getHoldings() {
        return (List<LicenceHolding>)readProperty("holdings");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "catalogPriceEuro":
                return this.catalogPriceEuro;
            case "includedPublicationCredits":
                return this.includedPublicationCredits;
            case "isDemo":
                return this.isDemo;
            case "licenceDurationDays":
                return this.licenceDurationDays;
            case "maxPublications":
                return this.maxPublications;
            case "maxSizeMo":
                return this.maxSizeMo;
            case "name":
                return this.name;
            case "sku":
                return this.sku;
            case "holdings":
                return this.holdings;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "catalogPriceEuro":
                this.catalogPriceEuro = (Integer)val;
                break;
            case "includedPublicationCredits":
                this.includedPublicationCredits = (Integer)val;
                break;
            case "isDemo":
                this.isDemo = (Boolean)val;
                break;
            case "licenceDurationDays":
                this.licenceDurationDays = (Integer)val;
                break;
            case "maxPublications":
                this.maxPublications = (Integer)val;
                break;
            case "maxSizeMo":
                this.maxSizeMo = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "sku":
                this.sku = (String)val;
                break;
            case "holdings":
                this.holdings = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.catalogPriceEuro);
        out.writeObject(this.includedPublicationCredits);
        out.writeObject(this.isDemo);
        out.writeObject(this.licenceDurationDays);
        out.writeObject(this.maxPublications);
        out.writeObject(this.maxSizeMo);
        out.writeObject(this.name);
        out.writeObject(this.sku);
        out.writeObject(this.holdings);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.catalogPriceEuro = (Integer)in.readObject();
        this.includedPublicationCredits = (Integer)in.readObject();
        this.isDemo = (Boolean)in.readObject();
        this.licenceDurationDays = (Integer)in.readObject();
        this.maxPublications = (Integer)in.readObject();
        this.maxSizeMo = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.sku = (String)in.readObject();
        this.holdings = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.Publication;

/**
 * Class _CmiData was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CmiData extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> COMPLETION_STATUS = Property.create("completionStatus", String.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> ENTRY = Property.create("entry", String.class);
    public static final Property<String> EXIT = Property.create("exit", String.class);
    public static final Property<String> LOCATION = Property.create("location", String.class);
    public static final Property<String> SCORE_RAW = Property.create("scoreRaw", String.class);
    public static final Property<String> SESSION_TIME = Property.create("sessionTime", String.class);
    public static final Property<String> SUCCESS_STATUS = Property.create("successStatus", String.class);
    public static final Property<String> SUSPEND_DATA = Property.create("suspendData", String.class);
    public static final Property<String> TOTAL_TIME = Property.create("totalTime", String.class);
    public static final Property<Publication> PUBLICATION = Property.create("publication", Publication.class);

    protected String completionStatus;
    protected String email;
    protected String entry;
    protected String exit;
    protected String location;
    protected String scoreRaw;
    protected String sessionTime;
    protected String successStatus;
    protected String suspendData;
    protected String totalTime;

    protected Object publication;

    public void setCompletionStatus(String completionStatus) {
        beforePropertyWrite("completionStatus", this.completionStatus, completionStatus);
        this.completionStatus = completionStatus;
    }

    public String getCompletionStatus() {
        beforePropertyRead("completionStatus");
        return this.completionStatus;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setEntry(String entry) {
        beforePropertyWrite("entry", this.entry, entry);
        this.entry = entry;
    }

    public String getEntry() {
        beforePropertyRead("entry");
        return this.entry;
    }

    public void setExit(String exit) {
        beforePropertyWrite("exit", this.exit, exit);
        this.exit = exit;
    }

    public String getExit() {
        beforePropertyRead("exit");
        return this.exit;
    }

    public void setLocation(String location) {
        beforePropertyWrite("location", this.location, location);
        this.location = location;
    }

    public String getLocation() {
        beforePropertyRead("location");
        return this.location;
    }

    public void setScoreRaw(String scoreRaw) {
        beforePropertyWrite("scoreRaw", this.scoreRaw, scoreRaw);
        this.scoreRaw = scoreRaw;
    }

    public String getScoreRaw() {
        beforePropertyRead("scoreRaw");
        return this.scoreRaw;
    }

    public void setSessionTime(String sessionTime) {
        beforePropertyWrite("sessionTime", this.sessionTime, sessionTime);
        this.sessionTime = sessionTime;
    }

    public String getSessionTime() {
        beforePropertyRead("sessionTime");
        return this.sessionTime;
    }

    public void setSuccessStatus(String successStatus) {
        beforePropertyWrite("successStatus", this.successStatus, successStatus);
        this.successStatus = successStatus;
    }

    public String getSuccessStatus() {
        beforePropertyRead("successStatus");
        return this.successStatus;
    }

    public void setSuspendData(String suspendData) {
        beforePropertyWrite("suspendData", this.suspendData, suspendData);
        this.suspendData = suspendData;
    }

    public String getSuspendData() {
        beforePropertyRead("suspendData");
        return this.suspendData;
    }

    public void setTotalTime(String totalTime) {
        beforePropertyWrite("totalTime", this.totalTime, totalTime);
        this.totalTime = totalTime;
    }

    public String getTotalTime() {
        beforePropertyRead("totalTime");
        return this.totalTime;
    }

    public void setPublication(Publication publication) {
        setToOneTarget("publication", publication, true);
    }

    public Publication getPublication() {
        return (Publication)readProperty("publication");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "completionStatus":
                return this.completionStatus;
            case "email":
                return this.email;
            case "entry":
                return this.entry;
            case "exit":
                return this.exit;
            case "location":
                return this.location;
            case "scoreRaw":
                return this.scoreRaw;
            case "sessionTime":
                return this.sessionTime;
            case "successStatus":
                return this.successStatus;
            case "suspendData":
                return this.suspendData;
            case "totalTime":
                return this.totalTime;
            case "publication":
                return this.publication;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "completionStatus":
                this.completionStatus = (String)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "entry":
                this.entry = (String)val;
                break;
            case "exit":
                this.exit = (String)val;
                break;
            case "location":
                this.location = (String)val;
                break;
            case "scoreRaw":
                this.scoreRaw = (String)val;
                break;
            case "sessionTime":
                this.sessionTime = (String)val;
                break;
            case "successStatus":
                this.successStatus = (String)val;
                break;
            case "suspendData":
                this.suspendData = (String)val;
                break;
            case "totalTime":
                this.totalTime = (String)val;
                break;
            case "publication":
                this.publication = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.completionStatus);
        out.writeObject(this.email);
        out.writeObject(this.entry);
        out.writeObject(this.exit);
        out.writeObject(this.location);
        out.writeObject(this.scoreRaw);
        out.writeObject(this.sessionTime);
        out.writeObject(this.successStatus);
        out.writeObject(this.suspendData);
        out.writeObject(this.totalTime);
        out.writeObject(this.publication);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.completionStatus = (String)in.readObject();
        this.email = (String)in.readObject();
        this.entry = (String)in.readObject();
        this.exit = (String)in.readObject();
        this.location = (String)in.readObject();
        this.scoreRaw = (String)in.readObject();
        this.sessionTime = (String)in.readObject();
        this.successStatus = (String)in.readObject();
        this.suspendData = (String)in.readObject();
        this.totalTime = (String)in.readObject();
        this.publication = in.readObject();
    }

}

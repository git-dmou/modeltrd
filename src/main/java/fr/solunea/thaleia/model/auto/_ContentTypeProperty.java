package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentProperty;
import fr.solunea.thaleia.model.ContentPropertyName;
import fr.solunea.thaleia.model.ContentType;

/**
 * Class _ContentTypeProperty was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContentTypeProperty extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> HIDDEN = Property.create("hidden", Boolean.class);
    public static final Property<ContentProperty> CONTENT_PROPERTY = Property.create("contentProperty", ContentProperty.class);
    public static final Property<ContentType> CONTENT_TYPE = Property.create("contentType", ContentType.class);
    public static final Property<List<ContentPropertyName>> NAMES = Property.create("names", List.class);

    protected Boolean hidden;

    protected Object contentProperty;
    protected Object contentType;
    protected Object names;

    public void setHidden(Boolean hidden) {
        beforePropertyWrite("hidden", this.hidden, hidden);
        this.hidden = hidden;
    }

    public Boolean getHidden() {
        beforePropertyRead("hidden");
        return this.hidden;
    }

    public void setContentProperty(ContentProperty contentProperty) {
        setToOneTarget("contentProperty", contentProperty, true);
    }

    public ContentProperty getContentProperty() {
        return (ContentProperty)readProperty("contentProperty");
    }

    public void setContentType(ContentType contentType) {
        setToOneTarget("contentType", contentType, true);
    }

    public ContentType getContentType() {
        return (ContentType)readProperty("contentType");
    }

    public void addToNames(ContentPropertyName obj) {
        addToManyTarget("names", obj, true);
    }

    public void removeFromNames(ContentPropertyName obj) {
        removeToManyTarget("names", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentPropertyName> getNames() {
        return (List<ContentPropertyName>)readProperty("names");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "hidden":
                return this.hidden;
            case "contentProperty":
                return this.contentProperty;
            case "contentType":
                return this.contentType;
            case "names":
                return this.names;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "hidden":
                this.hidden = (Boolean)val;
                break;
            case "contentProperty":
                this.contentProperty = val;
                break;
            case "contentType":
                this.contentType = val;
                break;
            case "names":
                this.names = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.hidden);
        out.writeObject(this.contentProperty);
        out.writeObject(this.contentType);
        out.writeObject(this.names);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.hidden = (Boolean)in.readObject();
        this.contentProperty = in.readObject();
        this.contentType = in.readObject();
        this.names = in.readObject();
    }

}

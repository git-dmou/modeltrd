package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.Content;
import fr.solunea.thaleia.model.ContentVersion;

/**
 * Class _Allocation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Allocation extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> POSITION = Property.create("position", Integer.class);
    public static final Property<Content> CHILD = Property.create("child", Content.class);
    public static final Property<ContentVersion> PARENT = Property.create("parent", ContentVersion.class);

    protected Integer position;

    protected Object child;
    protected Object parent;

    public void setPosition(Integer position) {
        beforePropertyWrite("position", this.position, position);
        this.position = position;
    }

    public Integer getPosition() {
        beforePropertyRead("position");
        return this.position;
    }

    public void setChild(Content child) {
        setToOneTarget("child", child, true);
    }

    public Content getChild() {
        return (Content)readProperty("child");
    }

    public void setParent(ContentVersion parent) {
        setToOneTarget("parent", parent, true);
    }

    public ContentVersion getParent() {
        return (ContentVersion)readProperty("parent");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "position":
                return this.position;
            case "child":
                return this.child;
            case "parent":
                return this.parent;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "position":
                this.position = (Integer)val;
                break;
            case "child":
                this.child = val;
                break;
            case "parent":
                this.parent = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.position);
        out.writeObject(this.child);
        out.writeObject(this.parent);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.position = (Integer)in.readObject();
        this.child = in.readObject();
        this.parent = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _Event was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Event extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<LocalDateTime> DATE = Property.create("date", LocalDateTime.class);
    public static final Property<String> DETAIL = Property.create("detail", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected LocalDateTime date;
    protected String detail;
    protected String name;

    protected Object user;

    public void setDate(LocalDateTime date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public LocalDateTime getDate() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setDetail(String detail) {
        beforePropertyWrite("detail", this.detail, detail);
        this.detail = detail;
    }

    public String getDetail() {
        beforePropertyRead("detail");
        return this.detail;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "date":
                return this.date;
            case "detail":
                return this.detail;
            case "name":
                return this.name;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "date":
                this.date = (LocalDateTime)val;
                break;
            case "detail":
                this.detail = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.date);
        out.writeObject(this.detail);
        out.writeObject(this.name);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.date = (LocalDateTime)in.readObject();
        this.detail = (String)in.readObject();
        this.name = (String)in.readObject();
        this.user = in.readObject();
    }

}

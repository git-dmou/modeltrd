package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _ApiToken was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ApiToken extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> EXPIRATION_DATE = Property.create("expirationDate", Date.class);
    public static final Property<String> VALUE = Property.create("value", String.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected Date expirationDate;
    protected String value;

    protected Object user;

    public void setExpirationDate(Date expirationDate) {
        beforePropertyWrite("expirationDate", this.expirationDate, expirationDate);
        this.expirationDate = expirationDate;
    }

    public Date getExpirationDate() {
        beforePropertyRead("expirationDate");
        return this.expirationDate;
    }

    public void setValue(String value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public String getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "expirationDate":
                return this.expirationDate;
            case "value":
                return this.value;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "expirationDate":
                this.expirationDate = (Date)val;
                break;
            case "value":
                this.value = (String)val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.expirationDate);
        out.writeObject(this.value);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.expirationDate = (Date)in.readObject();
        this.value = (String)in.readObject();
        this.user = in.readObject();
    }

}

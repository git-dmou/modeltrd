package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentPropertyValue;
import fr.solunea.thaleia.model.User;

/**
 * Class _EditedContent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EditedContent extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> CONTENT_DIRECTORY = Property.create("contentDirectory", String.class);
    public static final Property<Date> OPEN_DATE = Property.create("openDate", Date.class);
    public static final Property<String> PREVIEW_DIRECTORY = Property.create("previewDirectory", String.class);
    public static final Property<User> AUTHOR = Property.create("author", User.class);
    public static final Property<ContentPropertyValue> CONTENT_PROPERTY_VALUE = Property.create("contentPropertyValue", ContentPropertyValue.class);

    protected String contentDirectory;
    protected Date openDate;
    protected String previewDirectory;

    protected Object author;
    protected Object contentPropertyValue;

    public void setContentDirectory(String contentDirectory) {
        beforePropertyWrite("contentDirectory", this.contentDirectory, contentDirectory);
        this.contentDirectory = contentDirectory;
    }

    public String getContentDirectory() {
        beforePropertyRead("contentDirectory");
        return this.contentDirectory;
    }

    public void setOpenDate(Date openDate) {
        beforePropertyWrite("openDate", this.openDate, openDate);
        this.openDate = openDate;
    }

    public Date getOpenDate() {
        beforePropertyRead("openDate");
        return this.openDate;
    }

    public void setPreviewDirectory(String previewDirectory) {
        beforePropertyWrite("previewDirectory", this.previewDirectory, previewDirectory);
        this.previewDirectory = previewDirectory;
    }

    public String getPreviewDirectory() {
        beforePropertyRead("previewDirectory");
        return this.previewDirectory;
    }

    public void setAuthor(User author) {
        setToOneTarget("author", author, true);
    }

    public User getAuthor() {
        return (User)readProperty("author");
    }

    public void setContentPropertyValue(ContentPropertyValue contentPropertyValue) {
        setToOneTarget("contentPropertyValue", contentPropertyValue, true);
    }

    public ContentPropertyValue getContentPropertyValue() {
        return (ContentPropertyValue)readProperty("contentPropertyValue");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contentDirectory":
                return this.contentDirectory;
            case "openDate":
                return this.openDate;
            case "previewDirectory":
                return this.previewDirectory;
            case "author":
                return this.author;
            case "contentPropertyValue":
                return this.contentPropertyValue;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contentDirectory":
                this.contentDirectory = (String)val;
                break;
            case "openDate":
                this.openDate = (Date)val;
                break;
            case "previewDirectory":
                this.previewDirectory = (String)val;
                break;
            case "author":
                this.author = val;
                break;
            case "contentPropertyValue":
                this.contentPropertyValue = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contentDirectory);
        out.writeObject(this.openDate);
        out.writeObject(this.previewDirectory);
        out.writeObject(this.author);
        out.writeObject(this.contentPropertyValue);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contentDirectory = (String)in.readObject();
        this.openDate = (Date)in.readObject();
        this.previewDirectory = (String)in.readObject();
        this.author = in.readObject();
        this.contentPropertyValue = in.readObject();
    }

}

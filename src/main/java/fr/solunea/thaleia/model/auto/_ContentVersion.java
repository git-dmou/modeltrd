package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.Allocation;
import fr.solunea.thaleia.model.Content;
import fr.solunea.thaleia.model.ContentPropertyValue;
import fr.solunea.thaleia.model.ContentType;
import fr.solunea.thaleia.model.ContentVersionTag;
import fr.solunea.thaleia.model.Publication;
import fr.solunea.thaleia.model.User;

/**
 * Class _ContentVersion was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContentVersion extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> CONTENT_IDENTIFIER = Property.create("contentIdentifier", String.class);
    public static final Property<Date> LAST_UPDATE_DATE = Property.create("lastUpdateDate", Date.class);
    public static final Property<String> REVISION_NOTE = Property.create("revisionNote", String.class);
    public static final Property<Integer> REVISION_NUMBER = Property.create("revisionNumber", Integer.class);
    public static final Property<User> AUTHOR = Property.create("author", User.class);
    public static final Property<List<Allocation>> CHILDS = Property.create("childs", List.class);
    public static final Property<Content> CONTENT = Property.create("content", Content.class);
    public static final Property<ContentType> CONTENT_TYPE = Property.create("contentType", ContentType.class);
    public static final Property<List<ContentPropertyValue>> PROPERTIES = Property.create("properties", List.class);
    public static final Property<List<Publication>> PUBLICATIONS = Property.create("publications", List.class);
    public static final Property<List<ContentVersionTag>> TAGS = Property.create("tags", List.class);

    protected String contentIdentifier;
    protected Date lastUpdateDate;
    protected String revisionNote;
    protected Integer revisionNumber;

    protected Object author;
    protected Object childs;
    protected Object content;
    protected Object contentType;
    protected Object properties;
    protected Object publications;
    protected Object tags;

    public void setContentIdentifier(String contentIdentifier) {
        beforePropertyWrite("contentIdentifier", this.contentIdentifier, contentIdentifier);
        this.contentIdentifier = contentIdentifier;
    }

    public String getContentIdentifier() {
        beforePropertyRead("contentIdentifier");
        return this.contentIdentifier;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        beforePropertyWrite("lastUpdateDate", this.lastUpdateDate, lastUpdateDate);
        this.lastUpdateDate = lastUpdateDate;
    }

    public Date getLastUpdateDate() {
        beforePropertyRead("lastUpdateDate");
        return this.lastUpdateDate;
    }

    public void setRevisionNote(String revisionNote) {
        beforePropertyWrite("revisionNote", this.revisionNote, revisionNote);
        this.revisionNote = revisionNote;
    }

    public String getRevisionNote() {
        beforePropertyRead("revisionNote");
        return this.revisionNote;
    }

    public void setRevisionNumber(Integer revisionNumber) {
        beforePropertyWrite("revisionNumber", this.revisionNumber, revisionNumber);
        this.revisionNumber = revisionNumber;
    }

    public Integer getRevisionNumber() {
        beforePropertyRead("revisionNumber");
        return this.revisionNumber;
    }

    public void setAuthor(User author) {
        setToOneTarget("author", author, true);
    }

    public User getAuthor() {
        return (User)readProperty("author");
    }

    public void addToChilds(Allocation obj) {
        addToManyTarget("childs", obj, true);
    }

    public void removeFromChilds(Allocation obj) {
        removeToManyTarget("childs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Allocation> getChilds() {
        return (List<Allocation>)readProperty("childs");
    }

    public void setContent(Content content) {
        setToOneTarget("content", content, true);
    }

    public Content getContent() {
        return (Content)readProperty("content");
    }

    public void setContentType(ContentType contentType) {
        setToOneTarget("contentType", contentType, true);
    }

    public ContentType getContentType() {
        return (ContentType)readProperty("contentType");
    }

    public void addToProperties(ContentPropertyValue obj) {
        addToManyTarget("properties", obj, true);
    }

    public void removeFromProperties(ContentPropertyValue obj) {
        removeToManyTarget("properties", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentPropertyValue> getProperties() {
        return (List<ContentPropertyValue>)readProperty("properties");
    }

    public void addToPublications(Publication obj) {
        addToManyTarget("publications", obj, true);
    }

    public void removeFromPublications(Publication obj) {
        removeToManyTarget("publications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Publication> getPublications() {
        return (List<Publication>)readProperty("publications");
    }

    public void addToTags(ContentVersionTag obj) {
        addToManyTarget("tags", obj, true);
    }

    public void removeFromTags(ContentVersionTag obj) {
        removeToManyTarget("tags", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentVersionTag> getTags() {
        return (List<ContentVersionTag>)readProperty("tags");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contentIdentifier":
                return this.contentIdentifier;
            case "lastUpdateDate":
                return this.lastUpdateDate;
            case "revisionNote":
                return this.revisionNote;
            case "revisionNumber":
                return this.revisionNumber;
            case "author":
                return this.author;
            case "childs":
                return this.childs;
            case "content":
                return this.content;
            case "contentType":
                return this.contentType;
            case "properties":
                return this.properties;
            case "publications":
                return this.publications;
            case "tags":
                return this.tags;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contentIdentifier":
                this.contentIdentifier = (String)val;
                break;
            case "lastUpdateDate":
                this.lastUpdateDate = (Date)val;
                break;
            case "revisionNote":
                this.revisionNote = (String)val;
                break;
            case "revisionNumber":
                this.revisionNumber = (Integer)val;
                break;
            case "author":
                this.author = val;
                break;
            case "childs":
                this.childs = val;
                break;
            case "content":
                this.content = val;
                break;
            case "contentType":
                this.contentType = val;
                break;
            case "properties":
                this.properties = val;
                break;
            case "publications":
                this.publications = val;
                break;
            case "tags":
                this.tags = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contentIdentifier);
        out.writeObject(this.lastUpdateDate);
        out.writeObject(this.revisionNote);
        out.writeObject(this.revisionNumber);
        out.writeObject(this.author);
        out.writeObject(this.childs);
        out.writeObject(this.content);
        out.writeObject(this.contentType);
        out.writeObject(this.properties);
        out.writeObject(this.publications);
        out.writeObject(this.tags);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contentIdentifier = (String)in.readObject();
        this.lastUpdateDate = (Date)in.readObject();
        this.revisionNote = (String)in.readObject();
        this.revisionNumber = (Integer)in.readObject();
        this.author = in.readObject();
        this.childs = in.readObject();
        this.content = in.readObject();
        this.contentType = in.readObject();
        this.properties = in.readObject();
        this.publications = in.readObject();
        this.tags = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.LrsEndpoint;

/**
 * Class _LrsEndpointPersona was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LrsEndpointPersona extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> PERSONA = Property.create("persona", String.class);
    public static final Property<String> PERSONA_ATTRIBUTES = Property.create("personaAttributes", String.class);
    public static final Property<String> PERSONA_IDENTIFIERS = Property.create("personaIdentifiers", String.class);
    public static final Property<LrsEndpoint> LRS_ENDPOINT = Property.create("lrsEndpoint", LrsEndpoint.class);

    protected String persona;
    protected String personaAttributes;
    protected String personaIdentifiers;

    protected Object lrsEndpoint;

    public void setPersona(String persona) {
        beforePropertyWrite("persona", this.persona, persona);
        this.persona = persona;
    }

    public String getPersona() {
        beforePropertyRead("persona");
        return this.persona;
    }

    public void setPersonaAttributes(String personaAttributes) {
        beforePropertyWrite("personaAttributes", this.personaAttributes, personaAttributes);
        this.personaAttributes = personaAttributes;
    }

    public String getPersonaAttributes() {
        beforePropertyRead("personaAttributes");
        return this.personaAttributes;
    }

    public void setPersonaIdentifiers(String personaIdentifiers) {
        beforePropertyWrite("personaIdentifiers", this.personaIdentifiers, personaIdentifiers);
        this.personaIdentifiers = personaIdentifiers;
    }

    public String getPersonaIdentifiers() {
        beforePropertyRead("personaIdentifiers");
        return this.personaIdentifiers;
    }

    public void setLrsEndpoint(LrsEndpoint lrsEndpoint) {
        setToOneTarget("lrsEndpoint", lrsEndpoint, true);
    }

    public LrsEndpoint getLrsEndpoint() {
        return (LrsEndpoint)readProperty("lrsEndpoint");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "persona":
                return this.persona;
            case "personaAttributes":
                return this.personaAttributes;
            case "personaIdentifiers":
                return this.personaIdentifiers;
            case "lrsEndpoint":
                return this.lrsEndpoint;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "persona":
                this.persona = (String)val;
                break;
            case "personaAttributes":
                this.personaAttributes = (String)val;
                break;
            case "personaIdentifiers":
                this.personaIdentifiers = (String)val;
                break;
            case "lrsEndpoint":
                this.lrsEndpoint = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.persona);
        out.writeObject(this.personaAttributes);
        out.writeObject(this.personaIdentifiers);
        out.writeObject(this.lrsEndpoint);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.persona = (String)in.readObject();
        this.personaAttributes = (String)in.readObject();
        this.personaIdentifiers = (String)in.readObject();
        this.lrsEndpoint = in.readObject();
    }

}

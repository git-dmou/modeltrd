package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.LrsEndpointActivity;
import fr.solunea.thaleia.model.LrsEndpointPersona;
import fr.solunea.thaleia.model.LrsEndpointStatement;
import fr.solunea.thaleia.model.StatementProcessing;
import fr.solunea.thaleia.model.User;

/**
 * Class _LrsEndpoint was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LrsEndpoint extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<Date> LAST_COMMUNICATION_DATE = Property.create("lastCommunicationDate", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<String> PASSWORD_PERSONAS = Property.create("passwordPersonas", String.class);
    public static final Property<String> URL1 = Property.create("url1", String.class);
    public static final Property<String> URL2 = Property.create("url2", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<String> USERNAME_PERSONAS = Property.create("usernamePersonas", String.class);
    public static final Property<String> XAPIVERSION = Property.create("xapiversion", String.class);
    public static final Property<List<LrsEndpointActivity>> ACTIVITIES = Property.create("activities", List.class);
    public static final Property<User> OWNER = Property.create("owner", User.class);
    public static final Property<List<LrsEndpointPersona>> PERSONAS = Property.create("personas", List.class);
    public static final Property<List<StatementProcessing>> STATEMENT_PROCESSINGS = Property.create("statementProcessings", List.class);
    public static final Property<List<LrsEndpointStatement>> STATEMENTS = Property.create("statements", List.class);

    protected Boolean active;
    protected Date lastCommunicationDate;
    protected String name;
    protected String password;
    protected String passwordPersonas;
    protected String url1;
    protected String url2;
    protected String username;
    protected String usernamePersonas;
    protected String xapiversion;

    protected Object activities;
    protected Object owner;
    protected Object personas;
    protected Object statementProcessings;
    protected Object statements;

    public void setActive(Boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Boolean getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setLastCommunicationDate(Date lastCommunicationDate) {
        beforePropertyWrite("lastCommunicationDate", this.lastCommunicationDate, lastCommunicationDate);
        this.lastCommunicationDate = lastCommunicationDate;
    }

    public Date getLastCommunicationDate() {
        beforePropertyRead("lastCommunicationDate");
        return this.lastCommunicationDate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPasswordPersonas(String passwordPersonas) {
        beforePropertyWrite("passwordPersonas", this.passwordPersonas, passwordPersonas);
        this.passwordPersonas = passwordPersonas;
    }

    public String getPasswordPersonas() {
        beforePropertyRead("passwordPersonas");
        return this.passwordPersonas;
    }

    public void setUrl1(String url1) {
        beforePropertyWrite("url1", this.url1, url1);
        this.url1 = url1;
    }

    public String getUrl1() {
        beforePropertyRead("url1");
        return this.url1;
    }

    public void setUrl2(String url2) {
        beforePropertyWrite("url2", this.url2, url2);
        this.url2 = url2;
    }

    public String getUrl2() {
        beforePropertyRead("url2");
        return this.url2;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void setUsernamePersonas(String usernamePersonas) {
        beforePropertyWrite("usernamePersonas", this.usernamePersonas, usernamePersonas);
        this.usernamePersonas = usernamePersonas;
    }

    public String getUsernamePersonas() {
        beforePropertyRead("usernamePersonas");
        return this.usernamePersonas;
    }

    public void setXapiversion(String xapiversion) {
        beforePropertyWrite("xapiversion", this.xapiversion, xapiversion);
        this.xapiversion = xapiversion;
    }

    public String getXapiversion() {
        beforePropertyRead("xapiversion");
        return this.xapiversion;
    }

    public void addToActivities(LrsEndpointActivity obj) {
        addToManyTarget("activities", obj, true);
    }

    public void removeFromActivities(LrsEndpointActivity obj) {
        removeToManyTarget("activities", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LrsEndpointActivity> getActivities() {
        return (List<LrsEndpointActivity>)readProperty("activities");
    }

    public void setOwner(User owner) {
        setToOneTarget("owner", owner, true);
    }

    public User getOwner() {
        return (User)readProperty("owner");
    }

    public void addToPersonas(LrsEndpointPersona obj) {
        addToManyTarget("personas", obj, true);
    }

    public void removeFromPersonas(LrsEndpointPersona obj) {
        removeToManyTarget("personas", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LrsEndpointPersona> getPersonas() {
        return (List<LrsEndpointPersona>)readProperty("personas");
    }

    public void addToStatementProcessings(StatementProcessing obj) {
        addToManyTarget("statementProcessings", obj, true);
    }

    public void removeFromStatementProcessings(StatementProcessing obj) {
        removeToManyTarget("statementProcessings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StatementProcessing> getStatementProcessings() {
        return (List<StatementProcessing>)readProperty("statementProcessings");
    }

    public void addToStatements(LrsEndpointStatement obj) {
        addToManyTarget("statements", obj, true);
    }

    public void removeFromStatements(LrsEndpointStatement obj) {
        removeToManyTarget("statements", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LrsEndpointStatement> getStatements() {
        return (List<LrsEndpointStatement>)readProperty("statements");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "lastCommunicationDate":
                return this.lastCommunicationDate;
            case "name":
                return this.name;
            case "password":
                return this.password;
            case "passwordPersonas":
                return this.passwordPersonas;
            case "url1":
                return this.url1;
            case "url2":
                return this.url2;
            case "username":
                return this.username;
            case "usernamePersonas":
                return this.usernamePersonas;
            case "xapiversion":
                return this.xapiversion;
            case "activities":
                return this.activities;
            case "owner":
                return this.owner;
            case "personas":
                return this.personas;
            case "statementProcessings":
                return this.statementProcessings;
            case "statements":
                return this.statements;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Boolean)val;
                break;
            case "lastCommunicationDate":
                this.lastCommunicationDate = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "passwordPersonas":
                this.passwordPersonas = (String)val;
                break;
            case "url1":
                this.url1 = (String)val;
                break;
            case "url2":
                this.url2 = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "usernamePersonas":
                this.usernamePersonas = (String)val;
                break;
            case "xapiversion":
                this.xapiversion = (String)val;
                break;
            case "activities":
                this.activities = val;
                break;
            case "owner":
                this.owner = val;
                break;
            case "personas":
                this.personas = val;
                break;
            case "statementProcessings":
                this.statementProcessings = val;
                break;
            case "statements":
                this.statements = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.lastCommunicationDate);
        out.writeObject(this.name);
        out.writeObject(this.password);
        out.writeObject(this.passwordPersonas);
        out.writeObject(this.url1);
        out.writeObject(this.url2);
        out.writeObject(this.username);
        out.writeObject(this.usernamePersonas);
        out.writeObject(this.xapiversion);
        out.writeObject(this.activities);
        out.writeObject(this.owner);
        out.writeObject(this.personas);
        out.writeObject(this.statementProcessings);
        out.writeObject(this.statements);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Boolean)in.readObject();
        this.lastCommunicationDate = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.password = (String)in.readObject();
        this.passwordPersonas = (String)in.readObject();
        this.url1 = (String)in.readObject();
        this.url2 = (String)in.readObject();
        this.username = (String)in.readObject();
        this.usernamePersonas = (String)in.readObject();
        this.xapiversion = (String)in.readObject();
        this.activities = in.readObject();
        this.owner = in.readObject();
        this.personas = in.readObject();
        this.statementProcessings = in.readObject();
        this.statements = in.readObject();
    }

}

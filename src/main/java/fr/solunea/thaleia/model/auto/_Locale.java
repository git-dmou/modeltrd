package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentPropertyName;
import fr.solunea.thaleia.model.ContentPropertyValue;
import fr.solunea.thaleia.model.Publication;

/**
 * Class _Locale was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Locale extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<ContentPropertyValue>> CONTENT_PROPERTIES = Property.create("contentProperties", List.class);
    public static final Property<List<ContentPropertyName>> CONTENT_PROPERTY_NAMES = Property.create("contentPropertyNames", List.class);
    public static final Property<List<Publication>> PUBLICATION = Property.create("publication", List.class);

    protected String name;

    protected Object contentProperties;
    protected Object contentPropertyNames;
    protected Object publication;

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToContentProperties(ContentPropertyValue obj) {
        addToManyTarget("contentProperties", obj, true);
    }

    public void removeFromContentProperties(ContentPropertyValue obj) {
        removeToManyTarget("contentProperties", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentPropertyValue> getContentProperties() {
        return (List<ContentPropertyValue>)readProperty("contentProperties");
    }

    public void addToContentPropertyNames(ContentPropertyName obj) {
        addToManyTarget("contentPropertyNames", obj, true);
    }

    public void removeFromContentPropertyNames(ContentPropertyName obj) {
        removeToManyTarget("contentPropertyNames", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentPropertyName> getContentPropertyNames() {
        return (List<ContentPropertyName>)readProperty("contentPropertyNames");
    }

    public void addToPublication(Publication obj) {
        addToManyTarget("publication", obj, true);
    }

    public void removeFromPublication(Publication obj) {
        removeToManyTarget("publication", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Publication> getPublication() {
        return (List<Publication>)readProperty("publication");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "name":
                return this.name;
            case "contentProperties":
                return this.contentProperties;
            case "contentPropertyNames":
                return this.contentPropertyNames;
            case "publication":
                return this.publication;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "name":
                this.name = (String)val;
                break;
            case "contentProperties":
                this.contentProperties = val;
                break;
            case "contentPropertyNames":
                this.contentPropertyNames = val;
                break;
            case "publication":
                this.publication = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.name);
        out.writeObject(this.contentProperties);
        out.writeObject(this.contentPropertyNames);
        out.writeObject(this.publication);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.name = (String)in.readObject();
        this.contentProperties = in.readObject();
        this.contentPropertyNames = in.readObject();
        this.publication = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _AccountRequest was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AccountRequest extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ACCOUNT_COMPLETION_REDIRECTION = Property.create("accountCompletionRedirection", String.class);
    public static final Property<String> COMPANY = Property.create("company", String.class);
    public static final Property<String> EMAIL_VALIDATION_CODE = Property.create("emailValidationCode", String.class);
    public static final Property<String> MAIL = Property.create("mail", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> PHONE = Property.create("phone", String.class);
    public static final Property<Date> REQUEST_DATE = Property.create("requestDate", Date.class);
    public static final Property<User> CREATED_USER = Property.create("createdUser", User.class);

    protected String accountCompletionRedirection;
    protected String company;
    protected String emailValidationCode;
    protected String mail;
    protected String name;
    protected String phone;
    protected Date requestDate;

    protected Object createdUser;

    public void setAccountCompletionRedirection(String accountCompletionRedirection) {
        beforePropertyWrite("accountCompletionRedirection", this.accountCompletionRedirection, accountCompletionRedirection);
        this.accountCompletionRedirection = accountCompletionRedirection;
    }

    public String getAccountCompletionRedirection() {
        beforePropertyRead("accountCompletionRedirection");
        return this.accountCompletionRedirection;
    }

    public void setCompany(String company) {
        beforePropertyWrite("company", this.company, company);
        this.company = company;
    }

    public String getCompany() {
        beforePropertyRead("company");
        return this.company;
    }

    public void setEmailValidationCode(String emailValidationCode) {
        beforePropertyWrite("emailValidationCode", this.emailValidationCode, emailValidationCode);
        this.emailValidationCode = emailValidationCode;
    }

    public String getEmailValidationCode() {
        beforePropertyRead("emailValidationCode");
        return this.emailValidationCode;
    }

    public void setMail(String mail) {
        beforePropertyWrite("mail", this.mail, mail);
        this.mail = mail;
    }

    public String getMail() {
        beforePropertyRead("mail");
        return this.mail;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPhone(String phone) {
        beforePropertyWrite("phone", this.phone, phone);
        this.phone = phone;
    }

    public String getPhone() {
        beforePropertyRead("phone");
        return this.phone;
    }

    public void setRequestDate(Date requestDate) {
        beforePropertyWrite("requestDate", this.requestDate, requestDate);
        this.requestDate = requestDate;
    }

    public Date getRequestDate() {
        beforePropertyRead("requestDate");
        return this.requestDate;
    }

    public void setCreatedUser(User createdUser) {
        setToOneTarget("createdUser", createdUser, true);
    }

    public User getCreatedUser() {
        return (User)readProperty("createdUser");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "accountCompletionRedirection":
                return this.accountCompletionRedirection;
            case "company":
                return this.company;
            case "emailValidationCode":
                return this.emailValidationCode;
            case "mail":
                return this.mail;
            case "name":
                return this.name;
            case "phone":
                return this.phone;
            case "requestDate":
                return this.requestDate;
            case "createdUser":
                return this.createdUser;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "accountCompletionRedirection":
                this.accountCompletionRedirection = (String)val;
                break;
            case "company":
                this.company = (String)val;
                break;
            case "emailValidationCode":
                this.emailValidationCode = (String)val;
                break;
            case "mail":
                this.mail = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "phone":
                this.phone = (String)val;
                break;
            case "requestDate":
                this.requestDate = (Date)val;
                break;
            case "createdUser":
                this.createdUser = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.accountCompletionRedirection);
        out.writeObject(this.company);
        out.writeObject(this.emailValidationCode);
        out.writeObject(this.mail);
        out.writeObject(this.name);
        out.writeObject(this.phone);
        out.writeObject(this.requestDate);
        out.writeObject(this.createdUser);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.accountCompletionRedirection = (String)in.readObject();
        this.company = (String)in.readObject();
        this.emailValidationCode = (String)in.readObject();
        this.mail = (String)in.readObject();
        this.name = (String)in.readObject();
        this.phone = (String)in.readObject();
        this.requestDate = (Date)in.readObject();
        this.createdUser = in.readObject();
    }

}

package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.Licence;
import fr.solunea.thaleia.model.User;

/**
 * Class _LicenceHolding was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LicenceHolding extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> ATTRIBUTION_DATE = Property.create("attributionDate", Date.class);
    public static final Property<Boolean> CANCELED = Property.create("canceled", Boolean.class);
    public static final Property<Date> END_DATE = Property.create("endDate", Date.class);
    public static final Property<Integer> INCLUDED_PUBLICATIONS_CREDITS = Property.create("includedPublicationsCredits", Integer.class);
    public static final Property<Boolean> IS_DEMO = Property.create("isDemo", Boolean.class);
    public static final Property<Integer> MAX_PUBLICATIONS = Property.create("maxPublications", Integer.class);
    public static final Property<Integer> MAX_SIZE_MO = Property.create("maxSizeMo", Integer.class);
    public static final Property<String> ORIGIN = Property.create("origin", String.class);
    public static final Property<Date> START_DATE = Property.create("startDate", Date.class);
    public static final Property<String> USER_HASHED_EMAIL = Property.create("userHashedEmail", String.class);
    public static final Property<Licence> LICENCE = Property.create("licence", Licence.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected Date attributionDate;
    protected Boolean canceled;
    protected Date endDate;
    protected Integer includedPublicationsCredits;
    protected Boolean isDemo;
    protected Integer maxPublications;
    protected Integer maxSizeMo;
    protected String origin;
    protected Date startDate;
    protected String userHashedEmail;

    protected Object licence;
    protected Object user;

    public void setAttributionDate(Date attributionDate) {
        beforePropertyWrite("attributionDate", this.attributionDate, attributionDate);
        this.attributionDate = attributionDate;
    }

    public Date getAttributionDate() {
        beforePropertyRead("attributionDate");
        return this.attributionDate;
    }

    public void setCanceled(Boolean canceled) {
        beforePropertyWrite("canceled", this.canceled, canceled);
        this.canceled = canceled;
    }

    public Boolean getCanceled() {
        beforePropertyRead("canceled");
        return this.canceled;
    }

    public void setEndDate(Date endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public Date getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setIncludedPublicationsCredits(Integer includedPublicationsCredits) {
        beforePropertyWrite("includedPublicationsCredits", this.includedPublicationsCredits, includedPublicationsCredits);
        this.includedPublicationsCredits = includedPublicationsCredits;
    }

    public Integer getIncludedPublicationsCredits() {
        beforePropertyRead("includedPublicationsCredits");
        return this.includedPublicationsCredits;
    }

    public void setIsDemo(Boolean isDemo) {
        beforePropertyWrite("isDemo", this.isDemo, isDemo);
        this.isDemo = isDemo;
    }

    public Boolean getIsDemo() {
        beforePropertyRead("isDemo");
        return this.isDemo;
    }

    public void setMaxPublications(Integer maxPublications) {
        beforePropertyWrite("maxPublications", this.maxPublications, maxPublications);
        this.maxPublications = maxPublications;
    }

    public Integer getMaxPublications() {
        beforePropertyRead("maxPublications");
        return this.maxPublications;
    }

    public void setMaxSizeMo(Integer maxSizeMo) {
        beforePropertyWrite("maxSizeMo", this.maxSizeMo, maxSizeMo);
        this.maxSizeMo = maxSizeMo;
    }

    public Integer getMaxSizeMo() {
        beforePropertyRead("maxSizeMo");
        return this.maxSizeMo;
    }

    public void setOrigin(String origin) {
        beforePropertyWrite("origin", this.origin, origin);
        this.origin = origin;
    }

    public String getOrigin() {
        beforePropertyRead("origin");
        return this.origin;
    }

    public void setStartDate(Date startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public Date getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setUserHashedEmail(String userHashedEmail) {
        beforePropertyWrite("userHashedEmail", this.userHashedEmail, userHashedEmail);
        this.userHashedEmail = userHashedEmail;
    }

    public String getUserHashedEmail() {
        beforePropertyRead("userHashedEmail");
        return this.userHashedEmail;
    }

    public void setLicence(Licence licence) {
        setToOneTarget("licence", licence, true);
    }

    public Licence getLicence() {
        return (Licence)readProperty("licence");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "attributionDate":
                return this.attributionDate;
            case "canceled":
                return this.canceled;
            case "endDate":
                return this.endDate;
            case "includedPublicationsCredits":
                return this.includedPublicationsCredits;
            case "isDemo":
                return this.isDemo;
            case "maxPublications":
                return this.maxPublications;
            case "maxSizeMo":
                return this.maxSizeMo;
            case "origin":
                return this.origin;
            case "startDate":
                return this.startDate;
            case "userHashedEmail":
                return this.userHashedEmail;
            case "licence":
                return this.licence;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "attributionDate":
                this.attributionDate = (Date)val;
                break;
            case "canceled":
                this.canceled = (Boolean)val;
                break;
            case "endDate":
                this.endDate = (Date)val;
                break;
            case "includedPublicationsCredits":
                this.includedPublicationsCredits = (Integer)val;
                break;
            case "isDemo":
                this.isDemo = (Boolean)val;
                break;
            case "maxPublications":
                this.maxPublications = (Integer)val;
                break;
            case "maxSizeMo":
                this.maxSizeMo = (Integer)val;
                break;
            case "origin":
                this.origin = (String)val;
                break;
            case "startDate":
                this.startDate = (Date)val;
                break;
            case "userHashedEmail":
                this.userHashedEmail = (String)val;
                break;
            case "licence":
                this.licence = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.attributionDate);
        out.writeObject(this.canceled);
        out.writeObject(this.endDate);
        out.writeObject(this.includedPublicationsCredits);
        out.writeObject(this.isDemo);
        out.writeObject(this.maxPublications);
        out.writeObject(this.maxSizeMo);
        out.writeObject(this.origin);
        out.writeObject(this.startDate);
        out.writeObject(this.userHashedEmail);
        out.writeObject(this.licence);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.attributionDate = (Date)in.readObject();
        this.canceled = (Boolean)in.readObject();
        this.endDate = (Date)in.readObject();
        this.includedPublicationsCredits = (Integer)in.readObject();
        this.isDemo = (Boolean)in.readObject();
        this.maxPublications = (Integer)in.readObject();
        this.maxSizeMo = (Integer)in.readObject();
        this.origin = (String)in.readObject();
        this.startDate = (Date)in.readObject();
        this.userHashedEmail = (String)in.readObject();
        this.licence = in.readObject();
        this.user = in.readObject();
    }

}

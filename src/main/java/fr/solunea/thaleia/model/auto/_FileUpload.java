package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.User;

/**
 * Class _FileUpload was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FileUpload extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> EXPIRATION = Property.create("expiration", Date.class);
    public static final Property<String> FILENAME = Property.create("filename", String.class);
    public static final Property<String> PARAMETERS = Property.create("parameters", String.class);
    public static final Property<String> TREATMENT_CLASS = Property.create("treatmentClass", String.class);
    public static final Property<String> UPLOAD_ID = Property.create("uploadId", String.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected Date expiration;
    protected String filename;
    protected String parameters;
    protected String treatmentClass;
    protected String uploadId;

    protected Object user;

    public void setExpiration(Date expiration) {
        beforePropertyWrite("expiration", this.expiration, expiration);
        this.expiration = expiration;
    }

    public Date getExpiration() {
        beforePropertyRead("expiration");
        return this.expiration;
    }

    public void setFilename(String filename) {
        beforePropertyWrite("filename", this.filename, filename);
        this.filename = filename;
    }

    public String getFilename() {
        beforePropertyRead("filename");
        return this.filename;
    }

    public void setParameters(String parameters) {
        beforePropertyWrite("parameters", this.parameters, parameters);
        this.parameters = parameters;
    }

    public String getParameters() {
        beforePropertyRead("parameters");
        return this.parameters;
    }

    public void setTreatmentClass(String treatmentClass) {
        beforePropertyWrite("treatmentClass", this.treatmentClass, treatmentClass);
        this.treatmentClass = treatmentClass;
    }

    public String getTreatmentClass() {
        beforePropertyRead("treatmentClass");
        return this.treatmentClass;
    }

    public void setUploadId(String uploadId) {
        beforePropertyWrite("uploadId", this.uploadId, uploadId);
        this.uploadId = uploadId;
    }

    public String getUploadId() {
        beforePropertyRead("uploadId");
        return this.uploadId;
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "expiration":
                return this.expiration;
            case "filename":
                return this.filename;
            case "parameters":
                return this.parameters;
            case "treatmentClass":
                return this.treatmentClass;
            case "uploadId":
                return this.uploadId;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "expiration":
                this.expiration = (Date)val;
                break;
            case "filename":
                this.filename = (String)val;
                break;
            case "parameters":
                this.parameters = (String)val;
                break;
            case "treatmentClass":
                this.treatmentClass = (String)val;
                break;
            case "uploadId":
                this.uploadId = (String)val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.expiration);
        out.writeObject(this.filename);
        out.writeObject(this.parameters);
        out.writeObject(this.treatmentClass);
        out.writeObject(this.uploadId);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.expiration = (Date)in.readObject();
        this.filename = (String)in.readObject();
        this.parameters = (String)in.readObject();
        this.treatmentClass = (String)in.readObject();
        this.uploadId = (String)in.readObject();
        this.user = in.readObject();
    }

}

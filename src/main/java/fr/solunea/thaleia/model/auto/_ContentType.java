package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentTypeProperty;
import fr.solunea.thaleia.model.ContentVersion;

/**
 * Class _ContentType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContentType extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> IS_MODULE_TYPE = Property.create("isModuleType", Boolean.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<ContentVersion>> CONTENT_VERSIONS = Property.create("contentVersions", List.class);
    public static final Property<List<ContentTypeProperty>> PROPERTIES = Property.create("properties", List.class);

    protected Boolean isModuleType;
    protected String name;

    protected Object contentVersions;
    protected Object properties;

    public void setIsModuleType(Boolean isModuleType) {
        beforePropertyWrite("isModuleType", this.isModuleType, isModuleType);
        this.isModuleType = isModuleType;
    }

    public Boolean getIsModuleType() {
        beforePropertyRead("isModuleType");
        return this.isModuleType;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToContentVersions(ContentVersion obj) {
        addToManyTarget("contentVersions", obj, true);
    }

    public void removeFromContentVersions(ContentVersion obj) {
        removeToManyTarget("contentVersions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentVersion> getContentVersions() {
        return (List<ContentVersion>)readProperty("contentVersions");
    }

    public void addToProperties(ContentTypeProperty obj) {
        addToManyTarget("properties", obj, true);
    }

    public void removeFromProperties(ContentTypeProperty obj) {
        removeToManyTarget("properties", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentTypeProperty> getProperties() {
        return (List<ContentTypeProperty>)readProperty("properties");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "isModuleType":
                return this.isModuleType;
            case "name":
                return this.name;
            case "contentVersions":
                return this.contentVersions;
            case "properties":
                return this.properties;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "isModuleType":
                this.isModuleType = (Boolean)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "contentVersions":
                this.contentVersions = val;
                break;
            case "properties":
                this.properties = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.isModuleType);
        out.writeObject(this.name);
        out.writeObject(this.contentVersions);
        out.writeObject(this.properties);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.isModuleType = (Boolean)in.readObject();
        this.name = (String)in.readObject();
        this.contentVersions = in.readObject();
        this.properties = in.readObject();
    }

}

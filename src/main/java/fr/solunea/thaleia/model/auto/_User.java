package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.AccountRequest;
import fr.solunea.thaleia.model.AdhocReport;
import fr.solunea.thaleia.model.ApiToken;
import fr.solunea.thaleia.model.BuyProcess;
import fr.solunea.thaleia.model.ContentVersion;
import fr.solunea.thaleia.model.ContributeRole;
import fr.solunea.thaleia.model.Domain;
import fr.solunea.thaleia.model.DownloadableFile;
import fr.solunea.thaleia.model.EditedContent;
import fr.solunea.thaleia.model.Event;
import fr.solunea.thaleia.model.FileUpload;
import fr.solunea.thaleia.model.LicenceHolding;
import fr.solunea.thaleia.model.LmsAccess;
import fr.solunea.thaleia.model.Locale;
import fr.solunea.thaleia.model.LrsEndpoint;
import fr.solunea.thaleia.model.Publication;
import fr.solunea.thaleia.model.StatementProcessing;
import fr.solunea.thaleia.model.TempDir;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> EXPIRATION = Property.create("expiration", Date.class);
    public static final Property<String> EXTERNAL_SIGNIN = Property.create("externalSignin", String.class);
    public static final Property<Boolean> IS_ADMIN = Property.create("isAdmin", Boolean.class);
    public static final Property<Boolean> IS_EMAIL_VALIDATED = Property.create("isEmailValidated", Boolean.class);
    public static final Property<Date> LAST_ACCESS = Property.create("lastAccess", Date.class);
    public static final Property<String> LOGIN = Property.create("login", String.class);
    public static final Property<Boolean> MENU_CONTENTS = Property.create("menuContents", Boolean.class);
    public static final Property<Boolean> MENU_MODULES = Property.create("menuModules", Boolean.class);
    public static final Property<Boolean> MENU_TOOLS = Property.create("menuTools", Boolean.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Boolean> NEWSLETTER = Property.create("newsletter", Boolean.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Date> PASSWORD_CREATION_DATE = Property.create("passwordCreationDate", Date.class);
    public static final Property<String> POSTAL_ADDRESS = Property.create("postalAddress", String.class);
    public static final Property<String> RESET_PASSWORD_CODE = Property.create("resetPasswordCode", String.class);
    public static final Property<List<AdhocReport>> ADHOC_REPORTS = Property.create("adhocReports", List.class);
    public static final Property<List<ApiToken>> API_TOKENS = Property.create("apiTokens", List.class);
    public static final Property<List<BuyProcess>> BUY_PROCESSES = Property.create("buyProcesses", List.class);
    public static final Property<List<ContentVersion>> CONTENTS = Property.create("contents", List.class);
    public static final Property<List<ContributeRole>> CONTRIBUTE_ROLES = Property.create("contributeRoles", List.class);
    public static final Property<AccountRequest> CREATED_BY_REQUEST = Property.create("createdByRequest", AccountRequest.class);
    public static final Property<Domain> DOMAIN = Property.create("domain", Domain.class);
    public static final Property<List<DownloadableFile>> DOWNLOADABLE_FILES = Property.create("downloadableFiles", List.class);
    public static final Property<List<DownloadableFile>> DOWNLOADABLE_FILES_PUBLISHED = Property.create("downloadableFilesPublished", List.class);
    public static final Property<List<EditedContent>> EDITED_CONTENTS = Property.create("editedContents", List.class);
    public static final Property<List<Event>> EVENTS = Property.create("events", List.class);
    public static final Property<List<FileUpload>> FILE_UPLOADS = Property.create("fileUploads", List.class);
    public static final Property<List<LicenceHolding>> LICENCES = Property.create("licences", List.class);
    public static final Property<LmsAccess> LMS_ACCESS = Property.create("lmsAccess", LmsAccess.class);
    public static final Property<List<LrsEndpoint>> LRS_ENDPOINTS = Property.create("lrsEndpoints", List.class);
    public static final Property<Locale> PREFERED_LOCALE = Property.create("preferedLocale", Locale.class);
    public static final Property<List<Publication>> PUBLICATIONS = Property.create("publications", List.class);
    public static final Property<List<StatementProcessing>> STATEMENT_PROCESSINGS = Property.create("statementProcessings", List.class);
    public static final Property<List<TempDir>> TEMP_DIRS = Property.create("tempDirs", List.class);

    protected Date expiration;
    protected String externalSignin;
    protected Boolean isAdmin;
    protected Boolean isEmailValidated;
    protected Date lastAccess;
    protected String login;
    protected Boolean menuContents;
    protected Boolean menuModules;
    protected Boolean menuTools;
    protected String name;
    protected Boolean newsletter;
    protected String password;
    protected Date passwordCreationDate;
    protected String postalAddress;
    protected String resetPasswordCode;

    protected Object adhocReports;
    protected Object apiTokens;
    protected Object buyProcesses;
    protected Object contents;
    protected Object contributeRoles;
    protected Object createdByRequest;
    protected Object domain;
    protected Object downloadableFiles;
    protected Object downloadableFilesPublished;
    protected Object editedContents;
    protected Object events;
    protected Object fileUploads;
    protected Object licences;
    protected Object lmsAccess;
    protected Object lrsEndpoints;
    protected Object preferedLocale;
    protected Object publications;
    protected Object statementProcessings;
    protected Object tempDirs;

    public void setExpiration(Date expiration) {
        beforePropertyWrite("expiration", this.expiration, expiration);
        this.expiration = expiration;
    }

    public Date getExpiration() {
        beforePropertyRead("expiration");
        return this.expiration;
    }

    public void setExternalSignin(String externalSignin) {
        beforePropertyWrite("externalSignin", this.externalSignin, externalSignin);
        this.externalSignin = externalSignin;
    }

    public String getExternalSignin() {
        beforePropertyRead("externalSignin");
        return this.externalSignin;
    }

    public void setIsAdmin(Boolean isAdmin) {
        beforePropertyWrite("isAdmin", this.isAdmin, isAdmin);
        this.isAdmin = isAdmin;
    }

    public Boolean getIsAdmin() {
        beforePropertyRead("isAdmin");
        return this.isAdmin;
    }

    public void setIsEmailValidated(Boolean isEmailValidated) {
        beforePropertyWrite("isEmailValidated", this.isEmailValidated, isEmailValidated);
        this.isEmailValidated = isEmailValidated;
    }

    public Boolean getIsEmailValidated() {
        beforePropertyRead("isEmailValidated");
        return this.isEmailValidated;
    }

    public void setLastAccess(Date lastAccess) {
        beforePropertyWrite("lastAccess", this.lastAccess, lastAccess);
        this.lastAccess = lastAccess;
    }

    public Date getLastAccess() {
        beforePropertyRead("lastAccess");
        return this.lastAccess;
    }

    public void setLogin(String login) {
        beforePropertyWrite("login", this.login, login);
        this.login = login;
    }

    public String getLogin() {
        beforePropertyRead("login");
        return this.login;
    }

    public void setMenuContents(Boolean menuContents) {
        beforePropertyWrite("menuContents", this.menuContents, menuContents);
        this.menuContents = menuContents;
    }

    public Boolean getMenuContents() {
        beforePropertyRead("menuContents");
        return this.menuContents;
    }

    public void setMenuModules(Boolean menuModules) {
        beforePropertyWrite("menuModules", this.menuModules, menuModules);
        this.menuModules = menuModules;
    }

    public Boolean getMenuModules() {
        beforePropertyRead("menuModules");
        return this.menuModules;
    }

    public void setMenuTools(Boolean menuTools) {
        beforePropertyWrite("menuTools", this.menuTools, menuTools);
        this.menuTools = menuTools;
    }

    public Boolean getMenuTools() {
        beforePropertyRead("menuTools");
        return this.menuTools;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNewsletter(Boolean newsletter) {
        beforePropertyWrite("newsletter", this.newsletter, newsletter);
        this.newsletter = newsletter;
    }

    public Boolean getNewsletter() {
        beforePropertyRead("newsletter");
        return this.newsletter;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPasswordCreationDate(Date passwordCreationDate) {
        beforePropertyWrite("passwordCreationDate", this.passwordCreationDate, passwordCreationDate);
        this.passwordCreationDate = passwordCreationDate;
    }

    public Date getPasswordCreationDate() {
        beforePropertyRead("passwordCreationDate");
        return this.passwordCreationDate;
    }

    public void setPostalAddress(String postalAddress) {
        beforePropertyWrite("postalAddress", this.postalAddress, postalAddress);
        this.postalAddress = postalAddress;
    }

    public String getPostalAddress() {
        beforePropertyRead("postalAddress");
        return this.postalAddress;
    }

    public void setResetPasswordCode(String resetPasswordCode) {
        beforePropertyWrite("resetPasswordCode", this.resetPasswordCode, resetPasswordCode);
        this.resetPasswordCode = resetPasswordCode;
    }

    public String getResetPasswordCode() {
        beforePropertyRead("resetPasswordCode");
        return this.resetPasswordCode;
    }

    public void addToAdhocReports(AdhocReport obj) {
        addToManyTarget("adhocReports", obj, true);
    }

    public void removeFromAdhocReports(AdhocReport obj) {
        removeToManyTarget("adhocReports", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AdhocReport> getAdhocReports() {
        return (List<AdhocReport>)readProperty("adhocReports");
    }

    public void addToApiTokens(ApiToken obj) {
        addToManyTarget("apiTokens", obj, true);
    }

    public void removeFromApiTokens(ApiToken obj) {
        removeToManyTarget("apiTokens", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ApiToken> getApiTokens() {
        return (List<ApiToken>)readProperty("apiTokens");
    }

    public void addToBuyProcesses(BuyProcess obj) {
        addToManyTarget("buyProcesses", obj, true);
    }

    public void removeFromBuyProcesses(BuyProcess obj) {
        removeToManyTarget("buyProcesses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<BuyProcess> getBuyProcesses() {
        return (List<BuyProcess>)readProperty("buyProcesses");
    }

    public void addToContents(ContentVersion obj) {
        addToManyTarget("contents", obj, true);
    }

    public void removeFromContents(ContentVersion obj) {
        removeToManyTarget("contents", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContentVersion> getContents() {
        return (List<ContentVersion>)readProperty("contents");
    }

    public void addToContributeRoles(ContributeRole obj) {
        addToManyTarget("contributeRoles", obj, true);
    }

    public void removeFromContributeRoles(ContributeRole obj) {
        removeToManyTarget("contributeRoles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContributeRole> getContributeRoles() {
        return (List<ContributeRole>)readProperty("contributeRoles");
    }

    public void setCreatedByRequest(AccountRequest createdByRequest) {
        setToOneTarget("createdByRequest", createdByRequest, true);
    }

    public AccountRequest getCreatedByRequest() {
        return (AccountRequest)readProperty("createdByRequest");
    }

    public void setDomain(Domain domain) {
        setToOneTarget("domain", domain, true);
    }

    public Domain getDomain() {
        return (Domain)readProperty("domain");
    }

    public void addToDownloadableFiles(DownloadableFile obj) {
        addToManyTarget("downloadableFiles", obj, true);
    }

    public void removeFromDownloadableFiles(DownloadableFile obj) {
        removeToManyTarget("downloadableFiles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DownloadableFile> getDownloadableFiles() {
        return (List<DownloadableFile>)readProperty("downloadableFiles");
    }

    public void addToDownloadableFilesPublished(DownloadableFile obj) {
        addToManyTarget("downloadableFilesPublished", obj, true);
    }

    public void removeFromDownloadableFilesPublished(DownloadableFile obj) {
        removeToManyTarget("downloadableFilesPublished", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DownloadableFile> getDownloadableFilesPublished() {
        return (List<DownloadableFile>)readProperty("downloadableFilesPublished");
    }

    public void addToEditedContents(EditedContent obj) {
        addToManyTarget("editedContents", obj, true);
    }

    public void removeFromEditedContents(EditedContent obj) {
        removeToManyTarget("editedContents", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EditedContent> getEditedContents() {
        return (List<EditedContent>)readProperty("editedContents");
    }

    public void addToEvents(Event obj) {
        addToManyTarget("events", obj, true);
    }

    public void removeFromEvents(Event obj) {
        removeToManyTarget("events", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Event> getEvents() {
        return (List<Event>)readProperty("events");
    }

    public void addToFileUploads(FileUpload obj) {
        addToManyTarget("fileUploads", obj, true);
    }

    public void removeFromFileUploads(FileUpload obj) {
        removeToManyTarget("fileUploads", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FileUpload> getFileUploads() {
        return (List<FileUpload>)readProperty("fileUploads");
    }

    public void addToLicences(LicenceHolding obj) {
        addToManyTarget("licences", obj, true);
    }

    public void removeFromLicences(LicenceHolding obj) {
        removeToManyTarget("licences", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LicenceHolding> getLicences() {
        return (List<LicenceHolding>)readProperty("licences");
    }

    public void setLmsAccess(LmsAccess lmsAccess) {
        setToOneTarget("lmsAccess", lmsAccess, true);
    }

    public LmsAccess getLmsAccess() {
        return (LmsAccess)readProperty("lmsAccess");
    }

    public void addToLrsEndpoints(LrsEndpoint obj) {
        addToManyTarget("lrsEndpoints", obj, true);
    }

    public void removeFromLrsEndpoints(LrsEndpoint obj) {
        removeToManyTarget("lrsEndpoints", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LrsEndpoint> getLrsEndpoints() {
        return (List<LrsEndpoint>)readProperty("lrsEndpoints");
    }

    public void setPreferedLocale(Locale preferedLocale) {
        setToOneTarget("preferedLocale", preferedLocale, true);
    }

    public Locale getPreferedLocale() {
        return (Locale)readProperty("preferedLocale");
    }

    public void addToPublications(Publication obj) {
        addToManyTarget("publications", obj, true);
    }

    public void removeFromPublications(Publication obj) {
        removeToManyTarget("publications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Publication> getPublications() {
        return (List<Publication>)readProperty("publications");
    }

    public void addToStatementProcessings(StatementProcessing obj) {
        addToManyTarget("statementProcessings", obj, true);
    }

    public void removeFromStatementProcessings(StatementProcessing obj) {
        removeToManyTarget("statementProcessings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StatementProcessing> getStatementProcessings() {
        return (List<StatementProcessing>)readProperty("statementProcessings");
    }

    public void addToTempDirs(TempDir obj) {
        addToManyTarget("tempDirs", obj, true);
    }

    public void removeFromTempDirs(TempDir obj) {
        removeToManyTarget("tempDirs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TempDir> getTempDirs() {
        return (List<TempDir>)readProperty("tempDirs");
    }

    protected abstract void onPreRemove();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "expiration":
                return this.expiration;
            case "externalSignin":
                return this.externalSignin;
            case "isAdmin":
                return this.isAdmin;
            case "isEmailValidated":
                return this.isEmailValidated;
            case "lastAccess":
                return this.lastAccess;
            case "login":
                return this.login;
            case "menuContents":
                return this.menuContents;
            case "menuModules":
                return this.menuModules;
            case "menuTools":
                return this.menuTools;
            case "name":
                return this.name;
            case "newsletter":
                return this.newsletter;
            case "password":
                return this.password;
            case "passwordCreationDate":
                return this.passwordCreationDate;
            case "postalAddress":
                return this.postalAddress;
            case "resetPasswordCode":
                return this.resetPasswordCode;
            case "adhocReports":
                return this.adhocReports;
            case "apiTokens":
                return this.apiTokens;
            case "buyProcesses":
                return this.buyProcesses;
            case "contents":
                return this.contents;
            case "contributeRoles":
                return this.contributeRoles;
            case "createdByRequest":
                return this.createdByRequest;
            case "domain":
                return this.domain;
            case "downloadableFiles":
                return this.downloadableFiles;
            case "downloadableFilesPublished":
                return this.downloadableFilesPublished;
            case "editedContents":
                return this.editedContents;
            case "events":
                return this.events;
            case "fileUploads":
                return this.fileUploads;
            case "licences":
                return this.licences;
            case "lmsAccess":
                return this.lmsAccess;
            case "lrsEndpoints":
                return this.lrsEndpoints;
            case "preferedLocale":
                return this.preferedLocale;
            case "publications":
                return this.publications;
            case "statementProcessings":
                return this.statementProcessings;
            case "tempDirs":
                return this.tempDirs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "expiration":
                this.expiration = (Date)val;
                break;
            case "externalSignin":
                this.externalSignin = (String)val;
                break;
            case "isAdmin":
                this.isAdmin = (Boolean)val;
                break;
            case "isEmailValidated":
                this.isEmailValidated = (Boolean)val;
                break;
            case "lastAccess":
                this.lastAccess = (Date)val;
                break;
            case "login":
                this.login = (String)val;
                break;
            case "menuContents":
                this.menuContents = (Boolean)val;
                break;
            case "menuModules":
                this.menuModules = (Boolean)val;
                break;
            case "menuTools":
                this.menuTools = (Boolean)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "newsletter":
                this.newsletter = (Boolean)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "passwordCreationDate":
                this.passwordCreationDate = (Date)val;
                break;
            case "postalAddress":
                this.postalAddress = (String)val;
                break;
            case "resetPasswordCode":
                this.resetPasswordCode = (String)val;
                break;
            case "adhocReports":
                this.adhocReports = val;
                break;
            case "apiTokens":
                this.apiTokens = val;
                break;
            case "buyProcesses":
                this.buyProcesses = val;
                break;
            case "contents":
                this.contents = val;
                break;
            case "contributeRoles":
                this.contributeRoles = val;
                break;
            case "createdByRequest":
                this.createdByRequest = val;
                break;
            case "domain":
                this.domain = val;
                break;
            case "downloadableFiles":
                this.downloadableFiles = val;
                break;
            case "downloadableFilesPublished":
                this.downloadableFilesPublished = val;
                break;
            case "editedContents":
                this.editedContents = val;
                break;
            case "events":
                this.events = val;
                break;
            case "fileUploads":
                this.fileUploads = val;
                break;
            case "licences":
                this.licences = val;
                break;
            case "lmsAccess":
                this.lmsAccess = val;
                break;
            case "lrsEndpoints":
                this.lrsEndpoints = val;
                break;
            case "preferedLocale":
                this.preferedLocale = val;
                break;
            case "publications":
                this.publications = val;
                break;
            case "statementProcessings":
                this.statementProcessings = val;
                break;
            case "tempDirs":
                this.tempDirs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.expiration);
        out.writeObject(this.externalSignin);
        out.writeObject(this.isAdmin);
        out.writeObject(this.isEmailValidated);
        out.writeObject(this.lastAccess);
        out.writeObject(this.login);
        out.writeObject(this.menuContents);
        out.writeObject(this.menuModules);
        out.writeObject(this.menuTools);
        out.writeObject(this.name);
        out.writeObject(this.newsletter);
        out.writeObject(this.password);
        out.writeObject(this.passwordCreationDate);
        out.writeObject(this.postalAddress);
        out.writeObject(this.resetPasswordCode);
        out.writeObject(this.adhocReports);
        out.writeObject(this.apiTokens);
        out.writeObject(this.buyProcesses);
        out.writeObject(this.contents);
        out.writeObject(this.contributeRoles);
        out.writeObject(this.createdByRequest);
        out.writeObject(this.domain);
        out.writeObject(this.downloadableFiles);
        out.writeObject(this.downloadableFilesPublished);
        out.writeObject(this.editedContents);
        out.writeObject(this.events);
        out.writeObject(this.fileUploads);
        out.writeObject(this.licences);
        out.writeObject(this.lmsAccess);
        out.writeObject(this.lrsEndpoints);
        out.writeObject(this.preferedLocale);
        out.writeObject(this.publications);
        out.writeObject(this.statementProcessings);
        out.writeObject(this.tempDirs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.expiration = (Date)in.readObject();
        this.externalSignin = (String)in.readObject();
        this.isAdmin = (Boolean)in.readObject();
        this.isEmailValidated = (Boolean)in.readObject();
        this.lastAccess = (Date)in.readObject();
        this.login = (String)in.readObject();
        this.menuContents = (Boolean)in.readObject();
        this.menuModules = (Boolean)in.readObject();
        this.menuTools = (Boolean)in.readObject();
        this.name = (String)in.readObject();
        this.newsletter = (Boolean)in.readObject();
        this.password = (String)in.readObject();
        this.passwordCreationDate = (Date)in.readObject();
        this.postalAddress = (String)in.readObject();
        this.resetPasswordCode = (String)in.readObject();
        this.adhocReports = in.readObject();
        this.apiTokens = in.readObject();
        this.buyProcesses = in.readObject();
        this.contents = in.readObject();
        this.contributeRoles = in.readObject();
        this.createdByRequest = in.readObject();
        this.domain = in.readObject();
        this.downloadableFiles = in.readObject();
        this.downloadableFilesPublished = in.readObject();
        this.editedContents = in.readObject();
        this.events = in.readObject();
        this.fileUploads = in.readObject();
        this.licences = in.readObject();
        this.lmsAccess = in.readObject();
        this.lrsEndpoints = in.readObject();
        this.preferedLocale = in.readObject();
        this.publications = in.readObject();
        this.statementProcessings = in.readObject();
        this.tempDirs = in.readObject();
    }

}

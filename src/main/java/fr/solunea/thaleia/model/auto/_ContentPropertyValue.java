package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentProperty;
import fr.solunea.thaleia.model.ContentVersion;
import fr.solunea.thaleia.model.EditedContent;
import fr.solunea.thaleia.model.Locale;

/**
 * Class _ContentPropertyValue was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContentPropertyValue extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> VALUE = Property.create("value", String.class);
    public static final Property<ContentVersion> CONTENT_VERSION = Property.create("contentVersion", ContentVersion.class);
    public static final Property<List<EditedContent>> EDITED = Property.create("edited", List.class);
    public static final Property<Locale> LOCALE = Property.create("locale", Locale.class);
    public static final Property<ContentProperty> PROPERTY = Property.create("property", ContentProperty.class);

    protected String value;

    protected Object contentVersion;
    protected Object edited;
    protected Object locale;
    protected Object property;

    public void setValue(String value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public String getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void setContentVersion(ContentVersion contentVersion) {
        setToOneTarget("contentVersion", contentVersion, true);
    }

    public ContentVersion getContentVersion() {
        return (ContentVersion)readProperty("contentVersion");
    }

    public void addToEdited(EditedContent obj) {
        addToManyTarget("edited", obj, true);
    }

    public void removeFromEdited(EditedContent obj) {
        removeToManyTarget("edited", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EditedContent> getEdited() {
        return (List<EditedContent>)readProperty("edited");
    }

    public void setLocale(Locale locale) {
        setToOneTarget("locale", locale, true);
    }

    public Locale getLocale() {
        return (Locale)readProperty("locale");
    }

    public void setProperty(ContentProperty property) {
        setToOneTarget("property", property, true);
    }

    public ContentProperty getProperty() {
        return (ContentProperty)readProperty("property");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "value":
                return this.value;
            case "contentVersion":
                return this.contentVersion;
            case "edited":
                return this.edited;
            case "locale":
                return this.locale;
            case "property":
                return this.property;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "value":
                this.value = (String)val;
                break;
            case "contentVersion":
                this.contentVersion = val;
                break;
            case "edited":
                this.edited = val;
                break;
            case "locale":
                this.locale = val;
                break;
            case "property":
                this.property = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.value);
        out.writeObject(this.contentVersion);
        out.writeObject(this.edited);
        out.writeObject(this.locale);
        out.writeObject(this.property);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.value = (String)in.readObject();
        this.contentVersion = in.readObject();
        this.edited = in.readObject();
        this.locale = in.readObject();
        this.property = in.readObject();
    }

}

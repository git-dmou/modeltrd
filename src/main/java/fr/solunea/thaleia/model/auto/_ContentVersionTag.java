package fr.solunea.thaleia.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import fr.solunea.thaleia.model.ContentVersion;
import fr.solunea.thaleia.model.Tag;

/**
 * Class _ContentVersionTag was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContentVersionTag extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<ContentVersion> CONTENT_VERSION = Property.create("contentVersion", ContentVersion.class);
    public static final Property<Tag> TAG = Property.create("tag", Tag.class);


    protected Object contentVersion;
    protected Object tag;

    public void setContentVersion(ContentVersion contentVersion) {
        setToOneTarget("contentVersion", contentVersion, true);
    }

    public ContentVersion getContentVersion() {
        return (ContentVersion)readProperty("contentVersion");
    }

    public void setTag(Tag tag) {
        setToOneTarget("tag", tag, true);
    }

    public Tag getTag() {
        return (Tag)readProperty("tag");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contentVersion":
                return this.contentVersion;
            case "tag":
                return this.tag;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contentVersion":
                this.contentVersion = val;
                break;
            case "tag":
                this.tag = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contentVersion);
        out.writeObject(this.tag);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contentVersion = in.readObject();
        this.tag = in.readObject();
    }

}
